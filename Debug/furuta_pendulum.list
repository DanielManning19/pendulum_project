
furuta_pendulum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006360  08006360  0000803c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006360  08006360  00007360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006368  08006368  0000803c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006368  08006368  00007368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800636c  0800636c  0000736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08006370  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000003c  080063ac  0000803c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080063ac  00008394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8da  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4e  00000000  00000000  00016946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00018898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b47  00000000  00000000  000196e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c04  00000000  00000000  0001a22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb4a  00000000  00000000  0002fe33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf1b  00000000  00000000  0003f97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  000cb8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000cf86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000003c 	.word	0x2000003c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080059c8 	.word	0x080059c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000040 	.word	0x20000040
 80001d4:	080059c8 	.word	0x080059c8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b988 	b.w	8000edc <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	468e      	mov	lr, r1
 8000bec:	4604      	mov	r4, r0
 8000bee:	4688      	mov	r8, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14a      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	d962      	bls.n	8000cc0 <__udivmoddi4+0xdc>
 8000bfa:	fab2 f682 	clz	r6, r2
 8000bfe:	b14e      	cbz	r6, 8000c14 <__udivmoddi4+0x30>
 8000c00:	f1c6 0320 	rsb	r3, r6, #32
 8000c04:	fa01 f806 	lsl.w	r8, r1, r6
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	40b7      	lsls	r7, r6
 8000c0e:	ea43 0808 	orr.w	r8, r3, r8
 8000c12:	40b4      	lsls	r4, r6
 8000c14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0x62>
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c38:	f080 80ea 	bcs.w	8000e10 <__udivmoddi4+0x22c>
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f240 80e7 	bls.w	8000e10 <__udivmoddi4+0x22c>
 8000c42:	3902      	subs	r1, #2
 8000c44:	443b      	add	r3, r7
 8000c46:	1a9a      	subs	r2, r3, r2
 8000c48:	b2a3      	uxth	r3, r4
 8000c4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5a:	459c      	cmp	ip, r3
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0x8e>
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	f080 80d6 	bcs.w	8000e14 <__udivmoddi4+0x230>
 8000c68:	459c      	cmp	ip, r3
 8000c6a:	f240 80d3 	bls.w	8000e14 <__udivmoddi4+0x230>
 8000c6e:	443b      	add	r3, r7
 8000c70:	3802      	subs	r0, #2
 8000c72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c76:	eba3 030c 	sub.w	r3, r3, ip
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	b11d      	cbz	r5, 8000c86 <__udivmoddi4+0xa2>
 8000c7e:	40f3      	lsrs	r3, r6
 8000c80:	2200      	movs	r2, #0
 8000c82:	e9c5 3200 	strd	r3, r2, [r5]
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d905      	bls.n	8000c9a <__udivmoddi4+0xb6>
 8000c8e:	b10d      	cbz	r5, 8000c94 <__udivmoddi4+0xb0>
 8000c90:	e9c5 0100 	strd	r0, r1, [r5]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4608      	mov	r0, r1
 8000c98:	e7f5      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d146      	bne.n	8000d30 <__udivmoddi4+0x14c>
 8000ca2:	4573      	cmp	r3, lr
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xc8>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 8105 	bhi.w	8000eb6 <__udivmoddi4+0x2d2>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e5      	beq.n	8000c86 <__udivmoddi4+0xa2>
 8000cba:	e9c5 4800 	strd	r4, r8, [r5]
 8000cbe:	e7e2      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f000 8090 	beq.w	8000de6 <__udivmoddi4+0x202>
 8000cc6:	fab2 f682 	clz	r6, r2
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	f040 80a4 	bne.w	8000e18 <__udivmoddi4+0x234>
 8000cd0:	1a8a      	subs	r2, r1, r2
 8000cd2:	0c03      	lsrs	r3, r0, #16
 8000cd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd8:	b280      	uxth	r0, r0
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb04 f20c 	mul.w	r2, r4, ip
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x11e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x11c>
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	f200 80e0 	bhi.w	8000ec0 <__udivmoddi4+0x2dc>
 8000d00:	46c4      	mov	ip, r8
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d10:	fb02 f404 	mul.w	r4, r2, r4
 8000d14:	429c      	cmp	r4, r3
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x144>
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x142>
 8000d20:	429c      	cmp	r4, r3
 8000d22:	f200 80ca 	bhi.w	8000eba <__udivmoddi4+0x2d6>
 8000d26:	4602      	mov	r2, r0
 8000d28:	1b1b      	subs	r3, r3, r4
 8000d2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0x98>
 8000d30:	f1c1 0620 	rsb	r6, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3a:	431f      	orrs	r7, r3
 8000d3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d40:	fa20 f306 	lsr.w	r3, r0, r6
 8000d44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	fa1f fc87 	uxth.w	ip, r7
 8000d56:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x1a0>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d76:	f080 809c 	bcs.w	8000eb2 <__udivmoddi4+0x2ce>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8099 	bls.w	8000eb2 <__udivmoddi4+0x2ce>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	eba4 040e 	sub.w	r4, r4, lr
 8000d88:	fa1f fe83 	uxth.w	lr, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9c:	45a4      	cmp	ip, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1ce>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000da6:	f080 8082 	bcs.w	8000eae <__udivmoddi4+0x2ca>
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d97f      	bls.n	8000eae <__udivmoddi4+0x2ca>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	443c      	add	r4, r7
 8000db2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dbe:	4564      	cmp	r4, ip
 8000dc0:	4673      	mov	r3, lr
 8000dc2:	46e1      	mov	r9, ip
 8000dc4:	d362      	bcc.n	8000e8c <__udivmoddi4+0x2a8>
 8000dc6:	d05f      	beq.n	8000e88 <__udivmoddi4+0x2a4>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x1fe>
 8000dca:	ebb8 0203 	subs.w	r2, r8, r3
 8000dce:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dda:	431e      	orrs	r6, r3
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	e9c5 6400 	strd	r6, r4, [r5]
 8000de2:	2100      	movs	r1, #0
 8000de4:	e74f      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000de6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dea:	0c01      	lsrs	r1, r0, #16
 8000dec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df0:	b280      	uxth	r0, r0
 8000df2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000df6:	463b      	mov	r3, r7
 8000df8:	4638      	mov	r0, r7
 8000dfa:	463c      	mov	r4, r7
 8000dfc:	46b8      	mov	r8, r7
 8000dfe:	46be      	mov	lr, r7
 8000e00:	2620      	movs	r6, #32
 8000e02:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e06:	eba2 0208 	sub.w	r2, r2, r8
 8000e0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e0e:	e766      	b.n	8000cde <__udivmoddi4+0xfa>
 8000e10:	4601      	mov	r1, r0
 8000e12:	e718      	b.n	8000c46 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e72c      	b.n	8000c72 <__udivmoddi4+0x8e>
 8000e18:	f1c6 0220 	rsb	r2, r6, #32
 8000e1c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e20:	40b7      	lsls	r7, r6
 8000e22:	40b1      	lsls	r1, r6
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e32:	b2bc      	uxth	r4, r7
 8000e34:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e38:	0c11      	lsrs	r1, r2, #16
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb08 f904 	mul.w	r9, r8, r4
 8000e42:	40b0      	lsls	r0, r6
 8000e44:	4589      	cmp	r9, r1
 8000e46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4a:	b280      	uxth	r0, r0
 8000e4c:	d93e      	bls.n	8000ecc <__udivmoddi4+0x2e8>
 8000e4e:	1879      	adds	r1, r7, r1
 8000e50:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e54:	d201      	bcs.n	8000e5a <__udivmoddi4+0x276>
 8000e56:	4589      	cmp	r9, r1
 8000e58:	d81f      	bhi.n	8000e9a <__udivmoddi4+0x2b6>
 8000e5a:	eba1 0109 	sub.w	r1, r1, r9
 8000e5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e62:	fb09 f804 	mul.w	r8, r9, r4
 8000e66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d229      	bcs.n	8000ec8 <__udivmoddi4+0x2e4>
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7a:	d2c4      	bcs.n	8000e06 <__udivmoddi4+0x222>
 8000e7c:	4542      	cmp	r2, r8
 8000e7e:	d2c2      	bcs.n	8000e06 <__udivmoddi4+0x222>
 8000e80:	f1a9 0102 	sub.w	r1, r9, #2
 8000e84:	443a      	add	r2, r7
 8000e86:	e7be      	b.n	8000e06 <__udivmoddi4+0x222>
 8000e88:	45f0      	cmp	r8, lr
 8000e8a:	d29d      	bcs.n	8000dc8 <__udivmoddi4+0x1e4>
 8000e8c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e94:	3801      	subs	r0, #1
 8000e96:	46e1      	mov	r9, ip
 8000e98:	e796      	b.n	8000dc8 <__udivmoddi4+0x1e4>
 8000e9a:	eba7 0909 	sub.w	r9, r7, r9
 8000e9e:	4449      	add	r1, r9
 8000ea0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea8:	fb09 f804 	mul.w	r8, r9, r4
 8000eac:	e7db      	b.n	8000e66 <__udivmoddi4+0x282>
 8000eae:	4673      	mov	r3, lr
 8000eb0:	e77f      	b.n	8000db2 <__udivmoddi4+0x1ce>
 8000eb2:	4650      	mov	r0, sl
 8000eb4:	e766      	b.n	8000d84 <__udivmoddi4+0x1a0>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e6fd      	b.n	8000cb6 <__udivmoddi4+0xd2>
 8000eba:	443b      	add	r3, r7
 8000ebc:	3a02      	subs	r2, #2
 8000ebe:	e733      	b.n	8000d28 <__udivmoddi4+0x144>
 8000ec0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec4:	443b      	add	r3, r7
 8000ec6:	e71c      	b.n	8000d02 <__udivmoddi4+0x11e>
 8000ec8:	4649      	mov	r1, r9
 8000eca:	e79c      	b.n	8000e06 <__udivmoddi4+0x222>
 8000ecc:	eba1 0109 	sub.w	r1, r1, r9
 8000ed0:	46c4      	mov	ip, r8
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fb09 f804 	mul.w	r8, r9, r4
 8000eda:	e7c4      	b.n	8000e66 <__udivmoddi4+0x282>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <WS2812_Send>:
#define DUTY_CYCLE_ONE 0b111100 // PWM duty cycle to send a 1 to the LED chip
#define DUTY_CYCLE_ZERO 0b110000 // PWM duty cycle to send a 0 to the LED chip

// LED CONTROL
void WS2812_Send(uint32_t colours[])
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  for (int x = 0; x < NUM_LEDS; x++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e032      	b.n	8000f54 <WS2812_Send+0x74>
	  int colour = colours[x];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 24; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	e023      	b.n	8000f48 <WS2812_Send+0x68>
    {
      if (colour&(1<<(23 - i)))
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f1c3 0317 	rsb	r3, r3, #23
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	fa42 f303 	asr.w	r3, r2, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00b      	beq.n	8000f2c <WS2812_Send+0x4c>
      {
        spi_data[i + (x * 24)] = DUTY_CYCLE_ONE;
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <WS2812_Send+0xbc>)
 8000f26:	213c      	movs	r1, #60	@ 0x3c
 8000f28:	54d1      	strb	r1, [r2, r3]
 8000f2a:	e00a      	b.n	8000f42 <WS2812_Send+0x62>
      }
      else spi_data[i + (x * 24)] = DUTY_CYCLE_ZERO;
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	461a      	mov	r2, r3
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <WS2812_Send+0xbc>)
 8000f3e:	2130      	movs	r1, #48	@ 0x30
 8000f40:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 24; i++)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3301      	adds	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	2b17      	cmp	r3, #23
 8000f4c:	ddd8      	ble.n	8000f00 <WS2812_Send+0x20>
  for (int x = 0; x < NUM_LEDS; x++) {
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b09      	cmp	r3, #9
 8000f58:	ddc9      	ble.n	8000eee <WS2812_Send+0xe>
    }
  }

  // force a gap after the data is finished (from datasheet, min 50 microseconds)
  for (int i = 0; i < 40; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e007      	b.n	8000f70 <WS2812_Send+0x90>
    spi_data[i + (NUM_LEDS * 24)] = 0;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	33f0      	adds	r3, #240	@ 0xf0
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <WS2812_Send+0xbc>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 40; i++) {
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b27      	cmp	r3, #39	@ 0x27
 8000f74:	ddf4      	ble.n	8000f60 <WS2812_Send+0x80>
  }

  // wait for the previous data to be sent
  while (!data_sent_flag){};
 8000f76:	bf00      	nop
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <WS2812_Send+0xc0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0fb      	beq.n	8000f78 <WS2812_Send+0x98>
	data_sent_flag = 0;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <WS2812_Send+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

	HAL_SPI_Transmit_DMA(&hspi2, (uint32_t *)spi_data, SPI_DATA_SIZE);
 8000f86:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000f8a:	4904      	ldr	r1, [pc, #16]	@ (8000f9c <WS2812_Send+0xbc>)
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <WS2812_Send+0xc4>)
 8000f8e:	f003 f87b 	bl	8004088 <HAL_SPI_Transmit_DMA>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000254 	.word	0x20000254
 8000fa0:	20000010 	.word	0x20000010
 8000fa4:	20000058 	.word	0x20000058

08000fa8 <HAL_SPI_TxCpltCallback>:

// callback for when sending data to the LEDs has finished
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	HAL_SPI_DMAStop(&hspi2);
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <HAL_SPI_TxCpltCallback+0x1c>)
 8000fb2:	f003 f91b 	bl	80041ec <HAL_SPI_DMAStop>
	data_sent_flag = 1;
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <HAL_SPI_TxCpltCallback+0x20>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000058 	.word	0x20000058
 8000fc8:	20000010 	.word	0x20000010

08000fcc <HAL_GPIO_EXTI_Callback>:

// ENCODER READING (via interrupts)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_pin == ENCODER_ONE_Pin) {
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d119      	bne.n	8001010 <HAL_GPIO_EXTI_Callback+0x44>
    encoder_one_value = HAL_GPIO_ReadPin(ENCODER_ONE_GPIO_Port, ENCODER_ONE_Pin);
 8000fdc:	2120      	movs	r1, #32
 8000fde:	481c      	ldr	r0, [pc, #112]	@ (8001050 <HAL_GPIO_EXTI_Callback+0x84>)
 8000fe0:	f002 fae6 	bl	80035b0 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fea:	701a      	strb	r2, [r3, #0]

    if (encoder_two_value == encoder_one_value) { // determine phase of the two signals
 8000fec:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d105      	bne.n	8001004 <HAL_GPIO_EXTI_Callback+0x38>
      position++;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a17      	ldr	r2, [pc, #92]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 8001000:	6013      	str	r3, [r2, #0]
      position++;
    }
  } else {
		UNUSED(GPIO_pin);
	}
}
 8001002:	e021      	b.n	8001048 <HAL_GPIO_EXTI_Callback+0x7c>
      position--;
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	4a14      	ldr	r2, [pc, #80]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 800100c:	6013      	str	r3, [r2, #0]
}
 800100e:	e01b      	b.n	8001048 <HAL_GPIO_EXTI_Callback+0x7c>
	} else if (GPIO_pin == ENCODER_TWO_Pin) {
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d118      	bne.n	8001048 <HAL_GPIO_EXTI_Callback+0x7c>
    encoder_two_value = HAL_GPIO_ReadPin(ENCODER_TWO_GPIO_Port, ENCODER_TWO_Pin);
 8001016:	2110      	movs	r1, #16
 8001018:	480d      	ldr	r0, [pc, #52]	@ (8001050 <HAL_GPIO_EXTI_Callback+0x84>)
 800101a:	f002 fac9 	bl	80035b0 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001024:	701a      	strb	r2, [r3, #0]
    if (encoder_one_value == encoder_two_value) { // determine phase of the two signals
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_GPIO_EXTI_Callback+0x88>)
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x8c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d105      	bne.n	800103e <HAL_GPIO_EXTI_Callback+0x72>
      position--;
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3b01      	subs	r3, #1
 8001038:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	e004      	b.n	8001048 <HAL_GPIO_EXTI_Callback+0x7c>
      position++;
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a05      	ldr	r2, [pc, #20]	@ (800105c <HAL_GPIO_EXTI_Callback+0x90>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40020400 	.word	0x40020400
 8001054:	20000248 	.word	0x20000248
 8001058:	20000249 	.word	0x20000249
 800105c:	20000004 	.word	0x20000004

08001060 <ComputeEnergyShaping>:
float previous_position = 0;
float cosine_angle;
float angular_velocity;
float energy_term;

void ComputeEnergyShaping() {
 8001060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
  int time_change_arbitrary_units = __HAL_TIM_GET_COUNTER(&htim2);
 8001068:	4bb9      	ldr	r3, [pc, #740]	@ (8001350 <ComputeEnergyShaping+0x2f0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	603b      	str	r3, [r7, #0]
  time_change = time_change_arbitrary_units / 84000000.0;
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff fa03 	bl	800047c <__aeabi_i2d>
 8001076:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001328 <ComputeEnergyShaping+0x2c8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fb92 	bl	80007a4 <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fd44 	bl	8000b14 <__aeabi_d2f>
 800108c:	4603      	mov	r3, r0
 800108e:	4ab1      	ldr	r2, [pc, #708]	@ (8001354 <ComputeEnergyShaping+0x2f4>)
 8001090:	6013      	str	r3, [r2, #0]

  if (time_change >= sample_time) {
 8001092:	4bb0      	ldr	r3, [pc, #704]	@ (8001354 <ComputeEnergyShaping+0x2f4>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	4baf      	ldr	r3, [pc, #700]	@ (8001358 <ComputeEnergyShaping+0x2f8>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	f2c0 8193 	blt.w	80013d0 <ComputeEnergyShaping+0x370>
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80010aa:	4ba9      	ldr	r3, [pc, #676]	@ (8001350 <ComputeEnergyShaping+0x2f0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (previous_control_mode != ENERGY_SHAPING) { // don't act during the first cycle of energy shaping control
 80010b2:	4baa      	ldr	r3, [pc, #680]	@ (800135c <ComputeEnergyShaping+0x2fc>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d00d      	beq.n	80010d6 <ComputeEnergyShaping+0x76>
      previous_position = position;
 80010ba:	4ba9      	ldr	r3, [pc, #676]	@ (8001360 <ComputeEnergyShaping+0x300>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c6:	4ba7      	ldr	r3, [pc, #668]	@ (8001364 <ComputeEnergyShaping+0x304>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
      previous_control_mode = control_mode;
 80010cc:	4ba6      	ldr	r3, [pc, #664]	@ (8001368 <ComputeEnergyShaping+0x308>)
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	4ba2      	ldr	r3, [pc, #648]	@ (800135c <ComputeEnergyShaping+0x2fc>)
 80010d2:	701a      	strb	r2, [r3, #0]
      return;
 80010d4:	e17c      	b.n	80013d0 <ComputeEnergyShaping+0x370>
    }

    int position_inverted = 1200 - position;
 80010d6:	4ba2      	ldr	r3, [pc, #648]	@ (8001360 <ComputeEnergyShaping+0x300>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f5c3 6396 	rsb	r3, r3, #1200	@ 0x4b0
 80010de:	60fb      	str	r3, [r7, #12]
    if (position_inverted > 1200) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80010e6:	dd04      	ble.n	80010f2 <ComputeEnergyShaping+0x92>
      position_inverted -= 2400;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e007      	b.n	8001102 <ComputeEnergyShaping+0xa2>
    } else if (position_inverted <= -1200) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 80010f8:	dc03      	bgt.n	8001102 <ComputeEnergyShaping+0xa2>
      position_inverted += 2400;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8001100:	60fb      	str	r3, [r7, #12]
    }

    // work out the equivelant index in the sine lookup table for cosine
    int index = (int) floor(((position_inverted + 600) % 2400) / 2);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f503 7216 	add.w	r2, r3, #600	@ 0x258
 8001108:	4b98      	ldr	r3, [pc, #608]	@ (800136c <ComputeEnergyShaping+0x30c>)
 800110a:	fb83 1302 	smull	r1, r3, r3, r2
 800110e:	1219      	asrs	r1, r3, #8
 8001110:	17d3      	asrs	r3, r2, #31
 8001112:	1acb      	subs	r3, r1, r3
 8001114:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001118:	fb01 f303 	mul.w	r3, r1, r3
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	0fda      	lsrs	r2, r3, #31
 8001120:	4413      	add	r3, r2
 8001122:	105b      	asrs	r3, r3, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9a9 	bl	800047c <__aeabi_i2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fca7 	bl	8000a84 <__aeabi_d2iz>
 8001136:	4603      	mov	r3, r0
 8001138:	60bb      	str	r3, [r7, #8]
    if (index < 0) {
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da04      	bge.n	800114a <ComputeEnergyShaping+0xea>
      index += 1200;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	e007      	b.n	800115a <ComputeEnergyShaping+0xfa>
    } else if (index >= 1200) {
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001150:	db03      	blt.n	800115a <ComputeEnergyShaping+0xfa>
      index -= 1200;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001158:	60bb      	str	r3, [r7, #8]
    }

    cosine_angle = (sine_lookup_table[index] / 65535.0 * 2.0) - 1.0;
 800115a:	4a85      	ldr	r2, [pc, #532]	@ (8001370 <ComputeEnergyShaping+0x310>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f98a 	bl	800047c <__aeabi_i2d>
 8001168:	a371      	add	r3, pc, #452	@ (adr r3, 8001330 <ComputeEnergyShaping+0x2d0>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fb19 	bl	80007a4 <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	f7ff f831 	bl	80001e4 <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b79      	ldr	r3, [pc, #484]	@ (8001374 <ComputeEnergyShaping+0x314>)
 8001190:	f7ff f826 	bl	80001e0 <__aeabi_dsub>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fcba 	bl	8000b14 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a75      	ldr	r2, [pc, #468]	@ (8001378 <ComputeEnergyShaping+0x318>)
 80011a4:	6013      	str	r3, [r2, #0]

    int position_change = (position - previous_position);
 80011a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001360 <ComputeEnergyShaping+0x300>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001364 <ComputeEnergyShaping+0x304>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c0:	ee17 3a90 	vmov	r3, s15
 80011c4:	607b      	str	r3, [r7, #4]
    
    if (position_change > 1200) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80011cc:	dd04      	ble.n	80011d8 <ComputeEnergyShaping+0x178>
      position_change -= 2400;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	e007      	b.n	80011e8 <ComputeEnergyShaping+0x188>
    } else if (position_change <= -1200) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 80011de:	dc03      	bgt.n	80011e8 <ComputeEnergyShaping+0x188>
      position_change += 2400;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 80011e6:	607b      	str	r3, [r7, #4]
    }

    angular_velocity = position_change / time_change / 2400.0; // angular velocity of the encoder (in full cycles per second, NOT radians per second)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011f2:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <ComputeEnergyShaping+0x2f4>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800137c <ComputeEnergyShaping+0x31c>
 8001200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001204:	4b5e      	ldr	r3, [pc, #376]	@ (8001380 <ComputeEnergyShaping+0x320>)
 8001206:	edc3 7a00 	vstr	s15, [r3]

    energy_term = (9.81 * (1 + cosine_angle) - 0.9 * angular_velocity * angular_velocity); // a term in the expression based on how much more energy is required to get the pendulum upright
 800120a:	4b5b      	ldr	r3, [pc, #364]	@ (8001378 <ComputeEnergyShaping+0x318>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001218:	ee17 0a90 	vmov	r0, s15
 800121c:	f7ff f940 	bl	80004a0 <__aeabi_f2d>
 8001220:	a345      	add	r3, pc, #276	@ (adr r3, 8001338 <ComputeEnergyShaping+0x2d8>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff f993 	bl	8000550 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4614      	mov	r4, r2
 8001230:	461d      	mov	r5, r3
 8001232:	4b53      	ldr	r3, [pc, #332]	@ (8001380 <ComputeEnergyShaping+0x320>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f932 	bl	80004a0 <__aeabi_f2d>
 800123c:	a340      	add	r3, pc, #256	@ (adr r3, 8001340 <ComputeEnergyShaping+0x2e0>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f985 	bl	8000550 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4690      	mov	r8, r2
 800124c:	4699      	mov	r9, r3
 800124e:	4b4c      	ldr	r3, [pc, #304]	@ (8001380 <ComputeEnergyShaping+0x320>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f924 	bl	80004a0 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4640      	mov	r0, r8
 800125e:	4649      	mov	r1, r9
 8001260:	f7ff f976 	bl	8000550 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7fe ffb8 	bl	80001e0 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc4c 	bl	8000b14 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4a41      	ldr	r2, [pc, #260]	@ (8001384 <ComputeEnergyShaping+0x324>)
 8001280:	6013      	str	r3, [r2, #0]

    velocity += time_change * energy_shaping_scalar * angular_velocity * (cosine_angle * cosine_angle * cosine_angle * cosine_angle) * energy_term;
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <ComputeEnergyShaping+0x2f4>)
 8001284:	ed93 7a00 	vldr	s14, [r3]
 8001288:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <ComputeEnergyShaping+0x328>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001292:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <ComputeEnergyShaping+0x320>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129c:	4b36      	ldr	r3, [pc, #216]	@ (8001378 <ComputeEnergyShaping+0x318>)
 800129e:	edd3 6a00 	vldr	s13, [r3]
 80012a2:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <ComputeEnergyShaping+0x318>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012ac:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <ComputeEnergyShaping+0x318>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012b6:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <ComputeEnergyShaping+0x318>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <ComputeEnergyShaping+0x324>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <ComputeEnergyShaping+0x32c>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <ComputeEnergyShaping+0x32c>)
 80012da:	edc3 7a00 	vstr	s15, [r3]

    velocity *= 0.98; // damp the velocity so that it remains close to zero
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <ComputeEnergyShaping+0x32c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f8dc 	bl	80004a0 <__aeabi_f2d>
 80012e8:	a317      	add	r3, pc, #92	@ (adr r3, 8001348 <ComputeEnergyShaping+0x2e8>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f92f 	bl	8000550 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fc0b 	bl	8000b14 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a22      	ldr	r2, [pc, #136]	@ (800138c <ComputeEnergyShaping+0x32c>)
 8001302:	6013      	str	r3, [r2, #0]

    if (velocity > max_speed) velocity = max_speed;
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <ComputeEnergyShaping+0x32c>)
 8001306:	ed93 7a00 	vldr	s14, [r3]
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <ComputeEnergyShaping+0x330>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	dd3c      	ble.n	8001394 <ComputeEnergyShaping+0x334>
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <ComputeEnergyShaping+0x330>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1b      	ldr	r2, [pc, #108]	@ (800138c <ComputeEnergyShaping+0x32c>)
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e04c      	b.n	80013be <ComputeEnergyShaping+0x35e>
 8001324:	f3af 8000 	nop.w
 8001328:	00000000 	.word	0x00000000
 800132c:	419406f4 	.word	0x419406f4
 8001330:	00000000 	.word	0x00000000
 8001334:	40efffe0 	.word	0x40efffe0
 8001338:	51eb851f 	.word	0x51eb851f
 800133c:	40239eb8 	.word	0x40239eb8
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	3feccccc 	.word	0x3feccccc
 8001348:	f5c28f5c 	.word	0xf5c28f5c
 800134c:	3fef5c28 	.word	0x3fef5c28
 8001350:	20000158 	.word	0x20000158
 8001354:	20000250 	.word	0x20000250
 8001358:	20000008 	.word	0x20000008
 800135c:	20000231 	.word	0x20000231
 8001360:	20000004 	.word	0x20000004
 8001364:	2000036c 	.word	0x2000036c
 8001368:	20000230 	.word	0x20000230
 800136c:	1b4e81b5 	.word	0x1b4e81b5
 8001370:	080059e0 	.word	0x080059e0
 8001374:	3ff00000 	.word	0x3ff00000
 8001378:	20000370 	.word	0x20000370
 800137c:	45160000 	.word	0x45160000
 8001380:	20000374 	.word	0x20000374
 8001384:	20000378 	.word	0x20000378
 8001388:	20000018 	.word	0x20000018
 800138c:	20000234 	.word	0x20000234
 8001390:	2000000c 	.word	0x2000000c
    else if (velocity < -max_speed) velocity = -max_speed;
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <ComputeEnergyShaping+0x378>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	eeb1 7a67 	vneg.f32	s14, s15
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <ComputeEnergyShaping+0x37c>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd07      	ble.n	80013be <ComputeEnergyShaping+0x35e>
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <ComputeEnergyShaping+0x378>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	eef1 7a67 	vneg.f32	s15, s15
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <ComputeEnergyShaping+0x37c>)
 80013ba:	edc3 7a00 	vstr	s15, [r3]

    previous_position = position;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <ComputeEnergyShaping+0x380>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <ComputeEnergyShaping+0x384>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
  }
}
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	20000234 	.word	0x20000234
 80013e0:	20000004 	.word	0x20000004
 80013e4:	2000036c 	.word	0x2000036c

080013e8 <ComputePID>:

float integral_term = 0.0;
float min_error = 0.020;

// PID algorithm
void ComputePID() {
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
  int time_change_arbitrary_units = __HAL_TIM_GET_COUNTER(&htim2);
 80013ee:	4bb8      	ldr	r3, [pc, #736]	@ (80016d0 <ComputePID+0x2e8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	603b      	str	r3, [r7, #0]
  time_change = time_change_arbitrary_units / 84000000.0;
 80013f6:	6838      	ldr	r0, [r7, #0]
 80013f8:	f7ff f840 	bl	800047c <__aeabi_i2d>
 80013fc:	a3b0      	add	r3, pc, #704	@ (adr r3, 80016c0 <ComputePID+0x2d8>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f9cf 	bl	80007a4 <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fb81 	bl	8000b14 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4aaf      	ldr	r2, [pc, #700]	@ (80016d4 <ComputePID+0x2ec>)
 8001416:	6013      	str	r3, [r2, #0]

  if (time_change >= sample_time) {
 8001418:	4bae      	ldr	r3, [pc, #696]	@ (80016d4 <ComputePID+0x2ec>)
 800141a:	ed93 7a00 	vldr	s14, [r3]
 800141e:	4bae      	ldr	r3, [pc, #696]	@ (80016d8 <ComputePID+0x2f0>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	f2c0 8192 	blt.w	8001754 <ComputePID+0x36c>
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001430:	4ba7      	ldr	r3, [pc, #668]	@ (80016d0 <ComputePID+0x2e8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24

    error = (position - setpoint) / 1200.0;
 8001438:	4ba8      	ldr	r3, [pc, #672]	@ (80016dc <ComputePID+0x2f4>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4ba8      	ldr	r3, [pc, #672]	@ (80016e0 <ComputePID+0x2f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f81a 	bl	800047c <__aeabi_i2d>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4ba5      	ldr	r3, [pc, #660]	@ (80016e4 <ComputePID+0x2fc>)
 800144e:	f7ff f9a9 	bl	80007a4 <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fb5b 	bl	8000b14 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	4aa1      	ldr	r2, [pc, #644]	@ (80016e8 <ComputePID+0x300>)
 8001462:	6013      	str	r3, [r2, #0]

    if (error > 1.0) error -= 2.0;
 8001464:	4ba0      	ldr	r3, [pc, #640]	@ (80016e8 <ComputePID+0x300>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800146e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	dd09      	ble.n	800148c <ComputePID+0xa4>
 8001478:	4b9b      	ldr	r3, [pc, #620]	@ (80016e8 <ComputePID+0x300>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001486:	4b98      	ldr	r3, [pc, #608]	@ (80016e8 <ComputePID+0x300>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
    if (error <= -1.0) error += 2.0;
 800148c:	4b96      	ldr	r3, [pc, #600]	@ (80016e8 <ComputePID+0x300>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d809      	bhi.n	80014b4 <ComputePID+0xcc>
 80014a0:	4b91      	ldr	r3, [pc, #580]	@ (80016e8 <ComputePID+0x300>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ae:	4b8e      	ldr	r3, [pc, #568]	@ (80016e8 <ComputePID+0x300>)
 80014b0:	edc3 7a00 	vstr	s15, [r3]

    if (previous_control_mode != PID_CONTROL) { // in the first cycle of PID control, reset the integral
 80014b4:	4b8d      	ldr	r3, [pc, #564]	@ (80016ec <ComputePID+0x304>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d007      	beq.n	80014cc <ComputePID+0xe4>
      low_pass_error = error;
 80014bc:	4b8a      	ldr	r3, [pc, #552]	@ (80016e8 <ComputePID+0x300>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a8b      	ldr	r2, [pc, #556]	@ (80016f0 <ComputePID+0x308>)
 80014c2:	6013      	str	r3, [r2, #0]
      integral_term = 0.0;
 80014c4:	4b8b      	ldr	r3, [pc, #556]	@ (80016f4 <ComputePID+0x30c>)
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
    }

		low_pass_error = (error_low_pass_constant * previous_error) + (1 - error_low_pass_constant) * error;
 80014cc:	4b8a      	ldr	r3, [pc, #552]	@ (80016f8 <ComputePID+0x310>)
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	4b8a      	ldr	r3, [pc, #552]	@ (80016fc <ComputePID+0x314>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014dc:	4b86      	ldr	r3, [pc, #536]	@ (80016f8 <ComputePID+0x310>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80014e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014ea:	4b7f      	ldr	r3, [pc, #508]	@ (80016e8 <ComputePID+0x300>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	4b7d      	ldr	r3, [pc, #500]	@ (80016f0 <ComputePID+0x308>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]

		integral_term += ki * time_change * error;
 80014fe:	4b80      	ldr	r3, [pc, #512]	@ (8001700 <ComputePID+0x318>)
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	4b73      	ldr	r3, [pc, #460]	@ (80016d4 <ComputePID+0x2ec>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150e:	4b76      	ldr	r3, [pc, #472]	@ (80016e8 <ComputePID+0x300>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001518:	4b76      	ldr	r3, [pc, #472]	@ (80016f4 <ComputePID+0x30c>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	4b74      	ldr	r3, [pc, #464]	@ (80016f4 <ComputePID+0x30c>)
 8001524:	edc3 7a00 	vstr	s15, [r3]

    if (previous_control_mode != PID_CONTROL) { // don't act during the first cycle of PID control
 8001528:	4b70      	ldr	r3, [pc, #448]	@ (80016ec <ComputePID+0x304>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d008      	beq.n	8001542 <ComputePID+0x15a>
      previous_error = low_pass_error;
 8001530:	4b6f      	ldr	r3, [pc, #444]	@ (80016f0 <ComputePID+0x308>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a71      	ldr	r2, [pc, #452]	@ (80016fc <ComputePID+0x314>)
 8001536:	6013      	str	r3, [r2, #0]
      previous_control_mode = control_mode;
 8001538:	4b72      	ldr	r3, [pc, #456]	@ (8001704 <ComputePID+0x31c>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b6b      	ldr	r3, [pc, #428]	@ (80016ec <ComputePID+0x304>)
 800153e:	701a      	strb	r2, [r3, #0]
      return;
 8001540:	e108      	b.n	8001754 <ComputePID+0x36c>
    }

    float error_magnitude = error;
 8001542:	4b69      	ldr	r3, [pc, #420]	@ (80016e8 <ComputePID+0x300>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
    if (error_magnitude < 0) {
 8001548:	edd7 7a03 	vldr	s15, [r7, #12]
 800154c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	d505      	bpl.n	8001562 <ComputePID+0x17a>
      error_magnitude = -error_magnitude;
 8001556:	edd7 7a03 	vldr	s15, [r7, #12]
 800155a:	eef1 7a67 	vneg.f32	s15, s15
 800155e:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    if (error_magnitude < min_error) integral_term *= 0.92 + error_magnitude * 4.0; // when the error is small, scale down the integral term
 8001562:	4b69      	ldr	r3, [pc, #420]	@ (8001708 <ComputePID+0x320>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ed97 7a03 	vldr	s14, [r7, #12]
 800156c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d526      	bpl.n	80015c4 <ComputePID+0x1dc>
 8001576:	4b5f      	ldr	r3, [pc, #380]	@ (80016f4 <ComputePID+0x30c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff90 	bl	80004a0 <__aeabi_f2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7fe ff8b 	bl	80004a0 <__aeabi_f2d>
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b5f      	ldr	r3, [pc, #380]	@ (800170c <ComputePID+0x324>)
 8001590:	f7fe ffde 	bl	8000550 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	a34a      	add	r3, pc, #296	@ (adr r3, 80016c8 <ComputePID+0x2e0>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7fe fe1f 	bl	80001e4 <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	f7fe ffcf 	bl	8000550 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff faab 	bl	8000b14 <__aeabi_d2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a4c      	ldr	r2, [pc, #304]	@ (80016f4 <ComputePID+0x30c>)
 80015c2:	6013      	str	r3, [r2, #0]

		if (integral_term > max_integral_term) integral_term = max_integral_term;
 80015c4:	4b4b      	ldr	r3, [pc, #300]	@ (80016f4 <ComputePID+0x30c>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b51      	ldr	r3, [pc, #324]	@ (8001710 <ComputePID+0x328>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	dd04      	ble.n	80015e4 <ComputePID+0x1fc>
 80015da:	4b4d      	ldr	r3, [pc, #308]	@ (8001710 <ComputePID+0x328>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a45      	ldr	r2, [pc, #276]	@ (80016f4 <ComputePID+0x30c>)
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e014      	b.n	800160e <ComputePID+0x226>
		else if (integral_term < -max_integral_term) integral_term = -max_integral_term;
 80015e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001710 <ComputePID+0x328>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eeb1 7a67 	vneg.f32	s14, s15
 80015ee:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <ComputePID+0x30c>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd07      	ble.n	800160e <ComputePID+0x226>
 80015fe:	4b44      	ldr	r3, [pc, #272]	@ (8001710 <ComputePID+0x328>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	eef1 7a67 	vneg.f32	s15, s15
 8001608:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <ComputePID+0x30c>)
 800160a:	edc3 7a00 	vstr	s15, [r3]

		float error_change = low_pass_error - previous_error;
 800160e:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <ComputePID+0x308>)
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <ComputePID+0x314>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161e:	edc7 7a02 	vstr	s15, [r7, #8]

		if (error_change >= 1.0) error_change -= 2.0;
 8001622:	edd7 7a02 	vldr	s15, [r7, #8]
 8001626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	db08      	blt.n	8001646 <ComputePID+0x25e>
 8001634:	edd7 7a02 	vldr	s15, [r7, #8]
 8001638:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800163c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001640:	edc7 7a02 	vstr	s15, [r7, #8]
 8001644:	e010      	b.n	8001668 <ComputePID+0x280>
		else if (error_change < -1.0) error_change += 2.0;
 8001646:	edd7 7a02 	vldr	s15, [r7, #8]
 800164a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800164e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d507      	bpl.n	8001668 <ComputePID+0x280>
 8001658:	edd7 7a02 	vldr	s15, [r7, #8]
 800165c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001664:	edc7 7a02 	vstr	s15, [r7, #8]

		float new_velocity = (kp * error) + (integral_term) + (kd * error_change / time_change);
 8001668:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <ComputePID+0x32c>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <ComputePID+0x300>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <ComputePID+0x30c>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001682:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <ComputePID+0x330>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a02 	vldr	s15, [r7, #8]
 800168c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001690:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <ComputePID+0x2ec>)
 8001692:	edd3 6a00 	vldr	s13, [r3]
 8001696:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800169a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169e:	edc7 7a01 	vstr	s15, [r7, #4]

		if (new_velocity > max_speed) new_velocity = max_speed;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <ComputePID+0x334>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	dd34      	ble.n	8001720 <ComputePID+0x338>
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <ComputePID+0x334>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	e043      	b.n	8001746 <ComputePID+0x35e>
 80016be:	bf00      	nop
 80016c0:	00000000 	.word	0x00000000
 80016c4:	419406f4 	.word	0x419406f4
 80016c8:	d70a3d71 	.word	0xd70a3d71
 80016cc:	3fed70a3 	.word	0x3fed70a3
 80016d0:	20000158 	.word	0x20000158
 80016d4:	20000250 	.word	0x20000250
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000004 	.word	0x20000004
 80016e0:	2000024c 	.word	0x2000024c
 80016e4:	4092c000 	.word	0x4092c000
 80016e8:	2000037c 	.word	0x2000037c
 80016ec:	20000231 	.word	0x20000231
 80016f0:	20000380 	.word	0x20000380
 80016f4:	2000038c 	.word	0x2000038c
 80016f8:	20000384 	.word	0x20000384
 80016fc:	20000388 	.word	0x20000388
 8001700:	20000020 	.word	0x20000020
 8001704:	20000230 	.word	0x20000230
 8001708:	2000002c 	.word	0x2000002c
 800170c:	40100000 	.word	0x40100000
 8001710:	20000028 	.word	0x20000028
 8001714:	2000001c 	.word	0x2000001c
 8001718:	20000024 	.word	0x20000024
 800171c:	2000000c 	.word	0x2000000c
		else if (new_velocity < -max_speed) new_velocity = -max_speed;
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <ComputePID+0x374>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	eef1 7a67 	vneg.f32	s15, s15
 800172a:	ed97 7a01 	vldr	s14, [r7, #4]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d506      	bpl.n	8001746 <ComputePID+0x35e>
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <ComputePID+0x374>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eef1 7a67 	vneg.f32	s15, s15
 8001742:	edc7 7a01 	vstr	s15, [r7, #4]

		velocity = new_velocity;
 8001746:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <ComputePID+0x378>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6013      	str	r3, [r2, #0]

		previous_error = low_pass_error;
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <ComputePID+0x37c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <ComputePID+0x380>)
 8001752:	6013      	str	r3, [r2, #0]
  }
}
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bdb0      	pop	{r4, r5, r7, pc}
 800175a:	bf00      	nop
 800175c:	2000000c 	.word	0x2000000c
 8001760:	20000234 	.word	0x20000234
 8001764:	20000380 	.word	0x20000380
 8001768:	20000388 	.word	0x20000388
 800176c:	00000000 	.word	0x00000000

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b092      	sub	sp, #72	@ 0x48
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001776:	f001 f833 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177a:	f000 fb25 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177e:	f000 fd61 	bl	8002244 <MX_GPIO_Init>
  MX_DMA_Init();
 8001782:	f000 fd3f 	bl	8002204 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001786:	f000 fd13 	bl	80021b0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800178a:	f000 fbbf 	bl	8001f0c <MX_TIM1_Init>
  MX_TIM2_Init();
 800178e:	f000 fc75 	bl	800207c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001792:	f000 fcbf 	bl	8002114 <MX_TIM4_Init>
  MX_SPI2_Init();
 8001796:	f000 fb83 	bl	8001ea0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800179a:	2100      	movs	r1, #0
 800179c:	48b6      	ldr	r0, [pc, #728]	@ (8001a78 <main+0x308>)
 800179e:	f002 ffdb 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017a2:	2104      	movs	r1, #4
 80017a4:	48b4      	ldr	r0, [pc, #720]	@ (8001a78 <main+0x308>)
 80017a6:	f002 ffd7 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017aa:	2108      	movs	r1, #8
 80017ac:	48b2      	ldr	r0, [pc, #712]	@ (8001a78 <main+0x308>)
 80017ae:	f002 ffd3 	bl	8004758 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2); // timer 2 is used for PID & energy shaping controllers
 80017b2:	48b2      	ldr	r0, [pc, #712]	@ (8001a7c <main+0x30c>)
 80017b4:	f002 ff1c 	bl	80045f0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4); // timer 4 is used for timing the while loop below
 80017b8:	48b1      	ldr	r0, [pc, #708]	@ (8001a80 <main+0x310>)
 80017ba:	f002 ff19 	bl	80045f0 <HAL_TIM_Base_Start>

  // read the initial encoder values
  encoder_one_value = HAL_GPIO_ReadPin(ENCODER_ONE_GPIO_Port, ENCODER_ONE_Pin);
 80017be:	2120      	movs	r1, #32
 80017c0:	48b0      	ldr	r0, [pc, #704]	@ (8001a84 <main+0x314>)
 80017c2:	f001 fef5 	bl	80035b0 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	4baf      	ldr	r3, [pc, #700]	@ (8001a88 <main+0x318>)
 80017cc:	701a      	strb	r2, [r3, #0]
  encoder_two_value = HAL_GPIO_ReadPin(ENCODER_TWO_GPIO_Port, ENCODER_TWO_Pin);
 80017ce:	2110      	movs	r1, #16
 80017d0:	48ac      	ldr	r0, [pc, #688]	@ (8001a84 <main+0x314>)
 80017d2:	f001 feed 	bl	80035b0 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4bac      	ldr	r3, [pc, #688]	@ (8001a8c <main+0x31c>)
 80017dc:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */

    uint32_t colours[10];

    int distance = position;
 80017de:	4bac      	ldr	r3, [pc, #688]	@ (8001a90 <main+0x320>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	647b      	str	r3, [r7, #68]	@ 0x44

    if (distance < 0) {
 80017e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da02      	bge.n	80017f0 <main+0x80>
      distance = -distance;
 80017ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ec:	425b      	negs	r3, r3
 80017ee:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    distance = distance * 2.125; // scale the distance so that half a rotation causes all of the LEDs to be fully lit
 80017f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80017f2:	f7fe fe43 	bl	800047c <__aeabi_i2d>
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001a94 <main+0x324>)
 80017fc:	f7fe fea8 	bl	8000550 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f93c 	bl	8000a84 <__aeabi_d2iz>
 800180c:	4603      	mov	r3, r0
 800180e:	647b      	str	r3, [r7, #68]	@ 0x44

    // calculate the intensity of each LED
    for (int i = 0; i < 10; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	643b      	str	r3, [r7, #64]	@ 0x40
 8001814:	e063      	b.n	80018de <main+0x16e>
      int intensity = distance - i * 255;
 8001816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001818:	461a      	mov	r2, r3
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001820:	4413      	add	r3, r2
 8001822:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (intensity < 0) {
 8001824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001826:	2b00      	cmp	r3, #0
 8001828:	da02      	bge.n	8001830 <main+0xc0>
        intensity = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800182e:	e004      	b.n	800183a <main+0xca>
      } else if (intensity > 255) {
 8001830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001832:	2bff      	cmp	r3, #255	@ 0xff
 8001834:	dd01      	ble.n	800183a <main+0xca>
        intensity = 255;
 8001836:	23ff      	movs	r3, #255	@ 0xff
 8001838:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if (position >= 0) {
 800183a:	4b95      	ldr	r3, [pc, #596]	@ (8001a90 <main+0x320>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db24      	blt.n	800188c <main+0x11c>
        colours[i] = ((uint32_t) floor(intensity * value)) * 0x010001;
 8001842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	4b92      	ldr	r3, [pc, #584]	@ (8001a98 <main+0x328>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	ee17 0a90 	vmov	r0, s15
 800185a:	f7fe fe21 	bl	80004a0 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	ec43 2b10 	vmov	d0, r2, r3
 8001866:	f004 f833 	bl	80058d0 <floor>
 800186a:	ec53 2b10 	vmov	r2, r3, d0
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f92f 	bl	8000ad4 <__aeabi_d2uiz>
 8001876:	4602      	mov	r2, r0
 8001878:	4613      	mov	r3, r2
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	441a      	add	r2, r3
 800187e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	3348      	adds	r3, #72	@ 0x48
 8001884:	443b      	add	r3, r7
 8001886:	f843 2c48 	str.w	r2, [r3, #-72]
 800188a:	e025      	b.n	80018d8 <main+0x168>
      } else {
        colours[i] = ((uint32_t) floor(intensity * value)) * 0x010100;
 800188c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001896:	4b80      	ldr	r3, [pc, #512]	@ (8001a98 <main+0x328>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	ee17 0a90 	vmov	r0, s15
 80018a4:	f7fe fdfc 	bl	80004a0 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	ec43 2b10 	vmov	d0, r2, r3
 80018b0:	f004 f80e 	bl	80058d0 <floor>
 80018b4:	ec53 2b10 	vmov	r2, r3, d0
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff f90a 	bl	8000ad4 <__aeabi_d2uiz>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4613      	mov	r3, r2
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	4413      	add	r3, r2
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	461a      	mov	r2, r3
 80018cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	3348      	adds	r3, #72	@ 0x48
 80018d2:	443b      	add	r3, r7
 80018d4:	f843 2c48 	str.w	r2, [r3, #-72]
    for (int i = 0; i < 10; i++) {
 80018d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018da:	3301      	adds	r3, #1
 80018dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80018de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	dd98      	ble.n	8001816 <main+0xa6>
      }
    }

    WS2812_Send(colours); // send data to the LEDs
 80018e4:	463b      	mov	r3, r7
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fafa 	bl	8000ee0 <WS2812_Send>

    user_button_value = HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 80018ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f0:	486a      	ldr	r0, [pc, #424]	@ (8001a9c <main+0x32c>)
 80018f2:	f001 fe5d 	bl	80035b0 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b69      	ldr	r3, [pc, #420]	@ (8001aa0 <main+0x330>)
 80018fc:	701a      	strb	r2, [r3, #0]

    if (position > 1200) { // check if encoder position has rolled over
 80018fe:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <main+0x320>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001906:	dd06      	ble.n	8001916 <main+0x1a6>
      position -= 2400;
 8001908:	4b61      	ldr	r3, [pc, #388]	@ (8001a90 <main+0x320>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8001910:	4a5f      	ldr	r2, [pc, #380]	@ (8001a90 <main+0x320>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e00a      	b.n	800192c <main+0x1bc>
    } else if (position <= -1200) {
 8001916:	4b5e      	ldr	r3, [pc, #376]	@ (8001a90 <main+0x320>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 800191e:	dc05      	bgt.n	800192c <main+0x1bc>
      position += 2400;
 8001920:	4b5b      	ldr	r3, [pc, #364]	@ (8001a90 <main+0x320>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8001928:	4a59      	ldr	r2, [pc, #356]	@ (8001a90 <main+0x320>)
 800192a:	6013      	str	r3, [r2, #0]
    }

    // state logic
    if (!user_button_value) {
 800192c:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa0 <main+0x330>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <main+0x1cc>
      control_mode = INITIAL_PUSH;
 8001934:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa4 <main+0x334>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e017      	b.n	800196c <main+0x1fc>
    } else if (control_mode == NO_CONTROL) {
 800193c:	4b59      	ldr	r3, [pc, #356]	@ (8001aa4 <main+0x334>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <main+0x1dc>
      control_mode = NO_CONTROL;
 8001944:	4b57      	ldr	r3, [pc, #348]	@ (8001aa4 <main+0x334>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e00f      	b.n	800196c <main+0x1fc>
    } else if (position > 60 || position < -60) {
 800194c:	4b50      	ldr	r3, [pc, #320]	@ (8001a90 <main+0x320>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b3c      	cmp	r3, #60	@ 0x3c
 8001952:	dc04      	bgt.n	800195e <main+0x1ee>
 8001954:	4b4e      	ldr	r3, [pc, #312]	@ (8001a90 <main+0x320>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f113 0f3c 	cmn.w	r3, #60	@ 0x3c
 800195c:	da03      	bge.n	8001966 <main+0x1f6>
      control_mode = ENERGY_SHAPING;
 800195e:	4b51      	ldr	r3, [pc, #324]	@ (8001aa4 <main+0x334>)
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e002      	b.n	800196c <main+0x1fc>
    } else {
      control_mode = PID_CONTROL;
 8001966:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa4 <main+0x334>)
 8001968:	2203      	movs	r2, #3
 800196a:	701a      	strb	r2, [r3, #0]
    }

    // execute logic for the current state
    switch (control_mode) {
 800196c:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa4 <main+0x334>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d822      	bhi.n	80019ba <main+0x24a>
 8001974:	a201      	add	r2, pc, #4	@ (adr r2, 800197c <main+0x20c>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	0800198d 	.word	0x0800198d
 8001980:	0800199f 	.word	0x0800199f
 8001984:	080019af 	.word	0x080019af
 8001988:	080019b5 	.word	0x080019b5
      case NO_CONTROL:
        velocity = 0.0;
 800198c:	4b46      	ldr	r3, [pc, #280]	@ (8001aa8 <main+0x338>)
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
        previous_control_mode = control_mode;
 8001994:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <main+0x334>)
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	4b44      	ldr	r3, [pc, #272]	@ (8001aac <main+0x33c>)
 800199a:	701a      	strb	r2, [r3, #0]
        break;
 800199c:	e00d      	b.n	80019ba <main+0x24a>
      case INITIAL_PUSH:
        velocity = 0.2;
 800199e:	4b42      	ldr	r3, [pc, #264]	@ (8001aa8 <main+0x338>)
 80019a0:	4a43      	ldr	r2, [pc, #268]	@ (8001ab0 <main+0x340>)
 80019a2:	601a      	str	r2, [r3, #0]
        previous_control_mode = control_mode;
 80019a4:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <main+0x334>)
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b40      	ldr	r3, [pc, #256]	@ (8001aac <main+0x33c>)
 80019aa:	701a      	strb	r2, [r3, #0]
        break;
 80019ac:	e005      	b.n	80019ba <main+0x24a>
      case ENERGY_SHAPING:
        ComputeEnergyShaping();
 80019ae:	f7ff fb57 	bl	8001060 <ComputeEnergyShaping>
        break;
 80019b2:	e002      	b.n	80019ba <main+0x24a>
      case PID_CONTROL:
        ComputePID();
 80019b4:	f7ff fd18 	bl	80013e8 <ComputePID>
        break;
 80019b8:	bf00      	nop
    }

    delay_since_last_cycle = __HAL_TIM_GET_COUNTER(&htim4);
 80019ba:	4b31      	ldr	r3, [pc, #196]	@ (8001a80 <main+0x310>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab4 <main+0x344>)
 80019c2:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COUNTER(&htim4, 0);
 80019c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a80 <main+0x310>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24

    low_pass_velocity = (velocity_low_pass_constant * low_pass_velocity) + ((1 - velocity_low_pass_constant) * velocity);
 80019cc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <main+0x348>)
 80019ce:	ed93 7a00 	vldr	s14, [r3]
 80019d2:	4b3a      	ldr	r3, [pc, #232]	@ (8001abc <main+0x34c>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019dc:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <main+0x348>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019ea:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa8 <main+0x338>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <main+0x34c>)
 80019fa:	edc3 7a00 	vstr	s15, [r3]

    cycle_state += low_pass_velocity * delay_since_last_cycle / 50.0; // update BLDC motor position according to velocity
 80019fe:	4b30      	ldr	r3, [pc, #192]	@ (8001ac0 <main+0x350>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd4c 	bl	80004a0 <__aeabi_f2d>
 8001a08:	4604      	mov	r4, r0
 8001a0a:	460d      	mov	r5, r1
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <main+0x344>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <main+0x34c>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	ee17 0a90 	vmov	r0, s15
 8001a26:	f7fe fd3b 	bl	80004a0 <__aeabi_f2d>
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <main+0x354>)
 8001a30:	f7fe feb8 	bl	80007a4 <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7fe fbd2 	bl	80001e4 <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f864 	bl	8000b14 <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <main+0x350>)
 8001a50:	6013      	str	r3, [r2, #0]

    if (cycle_state < 0) { // check if BLDC motor position has rolled over
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <main+0x350>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d534      	bpl.n	8001acc <main+0x35c>
      cycle_state += 1200;
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <main+0x350>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001ac8 <main+0x358>
 8001a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <main+0x350>)
 8001a72:	edc3 7a00 	vstr	s15, [r3]
 8001a76:	e03d      	b.n	8001af4 <main+0x384>
 8001a78:	20000110 	.word	0x20000110
 8001a7c:	20000158 	.word	0x20000158
 8001a80:	200001a0 	.word	0x200001a0
 8001a84:	40020400 	.word	0x40020400
 8001a88:	20000248 	.word	0x20000248
 8001a8c:	20000249 	.word	0x20000249
 8001a90:	20000004 	.word	0x20000004
 8001a94:	40010000 	.word	0x40010000
 8001a98:	20000014 	.word	0x20000014
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000230 	.word	0x20000230
 8001aa8:	20000234 	.word	0x20000234
 8001aac:	20000231 	.word	0x20000231
 8001ab0:	3e4ccccd 	.word	0x3e4ccccd
 8001ab4:	20000240 	.word	0x20000240
 8001ab8:	2000023c 	.word	0x2000023c
 8001abc:	20000238 	.word	0x20000238
 8001ac0:	20000244 	.word	0x20000244
 8001ac4:	40490000 	.word	0x40490000
 8001ac8:	44960000 	.word	0x44960000
    } else if (cycle_state >= 1200) {
 8001acc:	4bb4      	ldr	r3, [pc, #720]	@ (8001da0 <main+0x630>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8001da4 <main+0x634>
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	db09      	blt.n	8001af4 <main+0x384>
      cycle_state -= 1200;
 8001ae0:	4baf      	ldr	r3, [pc, #700]	@ (8001da0 <main+0x630>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8001da4 <main+0x634>
 8001aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aee:	4bac      	ldr	r3, [pc, #688]	@ (8001da0 <main+0x630>)
 8001af0:	edc3 7a00 	vstr	s15, [r3]
    }

    float speed = velocity;
 8001af4:	4bac      	ldr	r3, [pc, #688]	@ (8001da8 <main+0x638>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (speed < 0) {
 8001afa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001afe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	d505      	bpl.n	8001b14 <main+0x3a4>
      speed = -speed;
 8001b08:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001b0c:	eef1 7a67 	vneg.f32	s15, s15
 8001b10:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    }

    // choose a time period for the PWM signal sent to the BLDC motor; at higher speeds, the time period should be shorter (i.e. frequency is proportional to speed)
    int period = 2000;
 8001b14:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
    if (speed > 0.0) {
 8001b1a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	dd2b      	ble.n	8001b80 <main+0x410>
      period = (int) floor(2000.0 / speed);
 8001b28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b2a:	f7fe fcb9 	bl	80004a0 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	f04f 0000 	mov.w	r0, #0
 8001b36:	499d      	ldr	r1, [pc, #628]	@ (8001dac <main+0x63c>)
 8001b38:	f7fe fe34 	bl	80007a4 <__aeabi_ddiv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	ec43 2b17 	vmov	d7, r2, r3
 8001b44:	eeb0 0a47 	vmov.f32	s0, s14
 8001b48:	eef0 0a67 	vmov.f32	s1, s15
 8001b4c:	f003 fec0 	bl	80058d0 <floor>
 8001b50:	ec53 2b10 	vmov	r2, r3, d0
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7fe ff94 	bl	8000a84 <__aeabi_d2iz>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (period > 40000) {
 8001b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b62:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001b66:	4293      	cmp	r3, r2
 8001b68:	dd03      	ble.n	8001b72 <main+0x402>
        period = 40000;
 8001b6a:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b70:	e006      	b.n	8001b80 <main+0x410>
      } else if (period < 1000) {
 8001b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b78:	da02      	bge.n	8001b80 <main+0x410>
        period = 1000;
 8001b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
    }

    float duty_cycle_scalar = 0.1 + (speed / 2.5); // all three duty cycles should be higher at high speeds; this effectively regulates the voltage to the motor (though not really)
 8001b80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b82:	f7fe fc8d 	bl	80004a0 <__aeabi_f2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b89      	ldr	r3, [pc, #548]	@ (8001db0 <main+0x640>)
 8001b8c:	f7fe fe0a 	bl	80007a4 <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	a37d      	add	r3, pc, #500	@ (adr r3, 8001d90 <main+0x620>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fb21 	bl	80001e4 <__adddf3>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7fe ffb3 	bl	8000b14 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	633b      	str	r3, [r7, #48]	@ 0x30

    // use the sine lookup table to cal
    uint16_t motor_in1_duty_cycle = sine_lookup_table[(int) floor(cycle_state)];
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8001da0 <main+0x630>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc72 	bl	80004a0 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ec43 2b10 	vmov	d0, r2, r3
 8001bc4:	f003 fe84 	bl	80058d0 <floor>
 8001bc8:	ec53 2b10 	vmov	r2, r3, d0
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ff58 	bl	8000a84 <__aeabi_d2iz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a77      	ldr	r2, [pc, #476]	@ (8001db4 <main+0x644>)
 8001bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t motor_in2_duty_cycle = sine_lookup_table[((int) floor(cycle_state + 400)) % 1200];
 8001bde:	4b70      	ldr	r3, [pc, #448]	@ (8001da0 <main+0x630>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001db8 <main+0x648>
 8001be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bec:	ee17 0a90 	vmov	r0, s15
 8001bf0:	f7fe fc56 	bl	80004a0 <__aeabi_f2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	ec43 2b10 	vmov	d0, r2, r3
 8001bfc:	f003 fe68 	bl	80058d0 <floor>
 8001c00:	ec53 2b10 	vmov	r2, r3, d0
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7fe ff3c 	bl	8000a84 <__aeabi_d2iz>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001dbc <main+0x64c>)
 8001c10:	fb83 1302 	smull	r1, r3, r3, r2
 8001c14:	11d9      	asrs	r1, r3, #7
 8001c16:	17d3      	asrs	r3, r2, #31
 8001c18:	1acb      	subs	r3, r1, r3
 8001c1a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a63      	ldr	r2, [pc, #396]	@ (8001db4 <main+0x644>)
 8001c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t motor_in3_duty_cycle = sine_lookup_table[((int) floor(cycle_state + 800)) % 1200];
 8001c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001da0 <main+0x630>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001dc0 <main+0x650>
 8001c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c3a:	ee17 0a90 	vmov	r0, s15
 8001c3e:	f7fe fc2f 	bl	80004a0 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ec43 2b10 	vmov	d0, r2, r3
 8001c4a:	f003 fe41 	bl	80058d0 <floor>
 8001c4e:	ec53 2b10 	vmov	r2, r3, d0
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ff15 	bl	8000a84 <__aeabi_d2iz>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b57      	ldr	r3, [pc, #348]	@ (8001dbc <main+0x64c>)
 8001c5e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c62:	11d9      	asrs	r1, r3, #7
 8001c64:	17d3      	asrs	r3, r2, #31
 8001c66:	1acb      	subs	r3, r1, r3
 8001c68:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	4a50      	ldr	r2, [pc, #320]	@ (8001db4 <main+0x644>)
 8001c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c78:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // set PWM duty cycles
    TIM1->CCR1 = (int) floor(((float) motor_in1_duty_cycle) * duty_cycle_scalar * period / 65535.0);
 8001c7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c84:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	ee17 0a90 	vmov	r0, s15
 8001c9e:	f7fe fbff 	bl	80004a0 <__aeabi_f2d>
 8001ca2:	a33d      	add	r3, pc, #244	@ (adr r3, 8001d98 <main+0x628>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fd7c 	bl	80007a4 <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	ec43 2b17 	vmov	d7, r2, r3
 8001cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb8:	eef0 0a67 	vmov.f32	s1, s15
 8001cbc:	f003 fe08 	bl	80058d0 <floor>
 8001cc0:	ec53 2b10 	vmov	r2, r3, d0
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fedc 	bl	8000a84 <__aeabi_d2iz>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <main+0x654>)
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = (int) floor(((float) motor_in2_duty_cycle) * duty_cycle_scalar * period / 65535.0);
 8001cd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cdc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fbd3 	bl	80004a0 <__aeabi_f2d>
 8001cfa:	a327      	add	r3, pc, #156	@ (adr r3, 8001d98 <main+0x628>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fd50 	bl	80007a4 <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	ec43 2b17 	vmov	d7, r2, r3
 8001d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d10:	eef0 0a67 	vmov.f32	s1, s15
 8001d14:	f003 fddc 	bl	80058d0 <floor>
 8001d18:	ec53 2b10 	vmov	r2, r3, d0
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe feb0 	bl	8000a84 <__aeabi_d2iz>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <main+0x654>)
 8001d28:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = (int) floor(((float) motor_in3_duty_cycle) * duty_cycle_scalar * period / 65535.0);
 8001d2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d34:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fba7 	bl	80004a0 <__aeabi_f2d>
 8001d52:	a311      	add	r3, pc, #68	@ (adr r3, 8001d98 <main+0x628>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fd24 	bl	80007a4 <__aeabi_ddiv>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b17 	vmov	d7, r2, r3
 8001d64:	eeb0 0a47 	vmov.f32	s0, s14
 8001d68:	eef0 0a67 	vmov.f32	s1, s15
 8001d6c:	f003 fdb0 	bl	80058d0 <floor>
 8001d70:	ec53 2b10 	vmov	r2, r3, d0
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fe84 	bl	8000a84 <__aeabi_d2iz>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <main+0x654>)
 8001d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    // set PWM period
    TIM1->ARR = period;
 8001d82:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <main+0x654>)
 8001d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
  {
 8001d88:	e529      	b.n	80017de <main+0x6e>
 8001d8a:	bf00      	nop
 8001d8c:	f3af 8000 	nop.w
 8001d90:	9999999a 	.word	0x9999999a
 8001d94:	3fb99999 	.word	0x3fb99999
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	40efffe0 	.word	0x40efffe0
 8001da0:	20000244 	.word	0x20000244
 8001da4:	44960000 	.word	0x44960000
 8001da8:	20000234 	.word	0x20000234
 8001dac:	409f4000 	.word	0x409f4000
 8001db0:	40040000 	.word	0x40040000
 8001db4:	080059e0 	.word	0x080059e0
 8001db8:	43c80000 	.word	0x43c80000
 8001dbc:	1b4e81b5 	.word	0x1b4e81b5
 8001dc0:	44480000 	.word	0x44480000
 8001dc4:	40010000 	.word	0x40010000

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	@ 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	2230      	movs	r2, #48	@ 0x30
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 fd4e 	bl	8005878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <SystemClock_Config+0xd0>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	4a28      	ldr	r2, [pc, #160]	@ (8001e98 <SystemClock_Config+0xd0>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfc:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <SystemClock_Config+0xd0>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <SystemClock_Config+0xd4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e14:	4a21      	ldr	r2, [pc, #132]	@ (8001e9c <SystemClock_Config+0xd4>)
 8001e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <SystemClock_Config+0xd4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e30:	2310      	movs	r3, #16
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e34:	2302      	movs	r3, #2
 8001e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e46:	2304      	movs	r3, #4
 8001e48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 fbf6 	bl	8003644 <HAL_RCC_OscConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e5e:	f000 faa5 	bl	80023ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e62:	230f      	movs	r3, #15
 8001e64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e66:	2302      	movs	r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 fe58 	bl	8003b34 <HAL_RCC_ClockConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e8a:	f000 fa8f 	bl	80023ac <Error_Handler>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3750      	adds	r7, #80	@ 0x50
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ea6:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <MX_SPI2_Init+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001eac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001eb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001eec:	220a      	movs	r2, #10
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_SPI2_Init+0x64>)
 8001ef2:	f002 f83f 	bl	8003f74 <HAL_SPI_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001efc:	f000 fa56 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000058 	.word	0x20000058
 8001f08:	40003800 	.word	0x40003800

08001f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b096      	sub	sp, #88	@ 0x58
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	615a      	str	r2, [r3, #20]
 8001f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2220      	movs	r2, #32
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fc97 	bl	8005878 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002078 <MX_TIM1_Init+0x16c>)
 8001f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f50:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b47      	ldr	r3, [pc, #284]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 120-1;
 8001f5c:	4b45      	ldr	r3, [pc, #276]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f5e:	2277      	movs	r2, #119	@ 0x77
 8001f60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f62:	4b44      	ldr	r3, [pc, #272]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f68:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f70:	2280      	movs	r2, #128	@ 0x80
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f74:	483f      	ldr	r0, [pc, #252]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f76:	f002 faeb 	bl	8004550 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001f80:	f000 fa14 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4838      	ldr	r0, [pc, #224]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001f92:	f002 fd53 	bl	8004a3c <HAL_TIM_ConfigClockSource>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f9c:	f000 fa06 	bl	80023ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fa0:	4834      	ldr	r0, [pc, #208]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001fa2:	f002 fb7f 	bl	80046a4 <HAL_TIM_PWM_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001fac:	f000 f9fe 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482d      	ldr	r0, [pc, #180]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001fc0:	f003 f8d6 	bl	8005170 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001fca:	f000 f9ef 	bl	80023ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	2360      	movs	r3, #96	@ 0x60
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4820      	ldr	r0, [pc, #128]	@ (8002074 <MX_TIM1_Init+0x168>)
 8001ff4:	f002 fc60 	bl	80048b8 <HAL_TIM_PWM_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001ffe:	f000 f9d5 	bl	80023ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002006:	2204      	movs	r2, #4
 8002008:	4619      	mov	r1, r3
 800200a:	481a      	ldr	r0, [pc, #104]	@ (8002074 <MX_TIM1_Init+0x168>)
 800200c:	f002 fc54 	bl	80048b8 <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002016:	f000 f9c9 	bl	80023ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800201a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201e:	2208      	movs	r2, #8
 8002020:	4619      	mov	r1, r3
 8002022:	4814      	ldr	r0, [pc, #80]	@ (8002074 <MX_TIM1_Init+0x168>)
 8002024:	f002 fc48 	bl	80048b8 <HAL_TIM_PWM_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800202e:	f000 f9bd 	bl	80023ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002046:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800204a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	@ (8002074 <MX_TIM1_Init+0x168>)
 8002056:	f003 f8f9 	bl	800524c <HAL_TIMEx_ConfigBreakDeadTime>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002060:	f000 f9a4 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002064:	4803      	ldr	r0, [pc, #12]	@ (8002074 <MX_TIM1_Init+0x168>)
 8002066:	f000 fab5 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3758      	adds	r7, #88	@ 0x58
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000110 	.word	0x20000110
 8002078:	40010000 	.word	0x40010000

0800207c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002098:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_TIM2_Init+0x94>)
 800209a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800209e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295
 80020b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c0:	4813      	ldr	r0, [pc, #76]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020c2:	f002 fa45 	bl	8004550 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020cc:	f000 f96e 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020de:	f002 fcad 	bl	8004a3c <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020e8:	f000 f960 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_TIM2_Init+0x94>)
 80020fa:	f003 f839 	bl	8005170 <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002104:	f000 f952 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000158 	.word	0x20000158

08002114 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002128:	463b      	mov	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <MX_TIM4_Init+0x94>)
 8002132:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <MX_TIM4_Init+0x98>)
 8002134:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8002136:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_TIM4_Init+0x94>)
 8002138:	2253      	movs	r2, #83	@ 0x53
 800213a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <MX_TIM4_Init+0x94>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <MX_TIM4_Init+0x94>)
 8002144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002148:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <MX_TIM4_Init+0x94>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <MX_TIM4_Init+0x94>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002156:	4814      	ldr	r0, [pc, #80]	@ (80021a8 <MX_TIM4_Init+0x94>)
 8002158:	f002 f9fa 	bl	8004550 <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002162:	f000 f923 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	4619      	mov	r1, r3
 8002172:	480d      	ldr	r0, [pc, #52]	@ (80021a8 <MX_TIM4_Init+0x94>)
 8002174:	f002 fc62 	bl	8004a3c <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800217e:	f000 f915 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800218a:	463b      	mov	r3, r7
 800218c:	4619      	mov	r1, r3
 800218e:	4806      	ldr	r0, [pc, #24]	@ (80021a8 <MX_TIM4_Init+0x94>)
 8002190:	f002 ffee 	bl	8005170 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800219a:	f000 f907 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200001a0 	.word	0x200001a0
 80021ac:	40000800 	.word	0x40000800

080021b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <MX_USART2_UART_Init+0x50>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021d6:	220c      	movs	r2, #12
 80021d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	@ (80021fc <MX_USART2_UART_Init+0x4c>)
 80021e8:	f003 f882 	bl	80052f0 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021f2:	f000 f8db 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200001e8 	.word	0x200001e8
 8002200:	40004400 	.word	0x40004400

08002204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <MX_DMA_Init+0x3c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <MX_DMA_Init+0x3c>)
 8002214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <MX_DMA_Init+0x3c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	200f      	movs	r0, #15
 800222c:	f000 fc25 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002230:	200f      	movs	r0, #15
 8002232:	f000 fc3e 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b4f      	ldr	r3, [pc, #316]	@ (800239c <MX_GPIO_Init+0x158>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a4e      	ldr	r2, [pc, #312]	@ (800239c <MX_GPIO_Init+0x158>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b4c      	ldr	r3, [pc, #304]	@ (800239c <MX_GPIO_Init+0x158>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b48      	ldr	r3, [pc, #288]	@ (800239c <MX_GPIO_Init+0x158>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a47      	ldr	r2, [pc, #284]	@ (800239c <MX_GPIO_Init+0x158>)
 8002280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b45      	ldr	r3, [pc, #276]	@ (800239c <MX_GPIO_Init+0x158>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b41      	ldr	r3, [pc, #260]	@ (800239c <MX_GPIO_Init+0x158>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a40      	ldr	r2, [pc, #256]	@ (800239c <MX_GPIO_Init+0x158>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b3e      	ldr	r3, [pc, #248]	@ (800239c <MX_GPIO_Init+0x158>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <MX_GPIO_Init+0x158>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a39      	ldr	r2, [pc, #228]	@ (800239c <MX_GPIO_Init+0x158>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <MX_GPIO_Init+0x158>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2120      	movs	r1, #32
 80022ce:	4834      	ldr	r0, [pc, #208]	@ (80023a0 <MX_GPIO_Init+0x15c>)
 80022d0:	f001 f986 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_EN1_Pin|MOTOR_EN3_Pin, GPIO_PIN_SET);
 80022d4:	2201      	movs	r2, #1
 80022d6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80022da:	4832      	ldr	r0, [pc, #200]	@ (80023a4 <MX_GPIO_Init+0x160>)
 80022dc:	f001 f980 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_EN2_GPIO_Port, MOTOR_EN2_Pin, GPIO_PIN_SET);
 80022e0:	2201      	movs	r2, #1
 80022e2:	2180      	movs	r1, #128	@ 0x80
 80022e4:	4830      	ldr	r0, [pc, #192]	@ (80023a8 <MX_GPIO_Init+0x164>)
 80022e6:	f001 f97b 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80022ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	482a      	ldr	r0, [pc, #168]	@ (80023a8 <MX_GPIO_Init+0x164>)
 8002300:	f000 ffd2 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002304:	2320      	movs	r3, #32
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4821      	ldr	r0, [pc, #132]	@ (80023a0 <MX_GPIO_Init+0x15c>)
 800231c:	f000 ffc4 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_EN1_Pin MOTOR_EN3_Pin */
  GPIO_InitStruct.Pin = MOTOR_EN1_Pin|MOTOR_EN3_Pin;
 8002320:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	481a      	ldr	r0, [pc, #104]	@ (80023a4 <MX_GPIO_Init+0x160>)
 800233a:	f000 ffb5 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_EN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_EN2_Pin;
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_EN2_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4814      	ldr	r0, [pc, #80]	@ (80023a8 <MX_GPIO_Init+0x164>)
 8002356:	f000 ffa7 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_TWO_Pin ENCODER_ONE_Pin */
  GPIO_InitStruct.Pin = ENCODER_TWO_Pin|ENCODER_ONE_Pin;
 800235a:	2330      	movs	r3, #48	@ 0x30
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800235e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <MX_GPIO_Init+0x160>)
 8002370:	f000 ff9a 	bl	80032a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2101      	movs	r1, #1
 8002378:	200a      	movs	r0, #10
 800237a:	f000 fb7e 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800237e:	200a      	movs	r0, #10
 8002380:	f000 fb97 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2101      	movs	r1, #1
 8002388:	2017      	movs	r0, #23
 800238a:	f000 fb76 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800238e:	2017      	movs	r0, #23
 8002390:	f000 fb8f 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	@ 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <Error_Handler+0x8>

080023b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <HAL_MspInit+0x4c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3f      	ldr	r2, [pc, #252]	@ (8002524 <HAL_SPI_MspInit+0x11c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d177      	bne.n	800251a <HAL_SPI_MspInit+0x112>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b3e      	ldr	r3, [pc, #248]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b37      	ldr	r3, [pc, #220]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a36      	ldr	r2, [pc, #216]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b30      	ldr	r3, [pc, #192]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4a2f      	ldr	r2, [pc, #188]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_SPI_MspInit+0x120>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800247e:	2308      	movs	r3, #8
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800248e:	2305      	movs	r3, #5
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	4824      	ldr	r0, [pc, #144]	@ (800252c <HAL_SPI_MspInit+0x124>)
 800249a:	f000 ff05 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800249e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024b0:	2305      	movs	r3, #5
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	481d      	ldr	r0, [pc, #116]	@ (8002530 <HAL_SPI_MspInit+0x128>)
 80024bc:	f000 fef4 	bl	80032a8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_SPI_MspInit+0x130>)
 80024c4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024ce:	2240      	movs	r2, #64	@ 0x40
 80024d0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d2:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024de:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80024fe:	480d      	ldr	r0, [pc, #52]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 8002500:	f000 faf2 	bl	8002ae8 <HAL_DMA_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800250a:	f7ff ff4f 	bl	80023ac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a08      	ldr	r2, [pc, #32]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 8002512:	649a      	str	r2, [r3, #72]	@ 0x48
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_SPI_MspInit+0x12c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40003800 	.word	0x40003800
 8002528:	40023800 	.word	0x40023800
 800252c:	40020800 	.word	0x40020800
 8002530:	40020400 	.word	0x40020400
 8002534:	200000b0 	.word	0x200000b0
 8002538:	40026070 	.word	0x40026070

0800253c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_TIM_Base_MspInit+0x8c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10e      	bne.n	800256c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6453      	str	r3, [r2, #68]	@ 0x44
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800256a:	e026      	b.n	80025ba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002574:	d10e      	bne.n	8002594 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6413      	str	r3, [r2, #64]	@ 0x40
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
}
 8002592:	e012      	b.n	80025ba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <HAL_TIM_Base_MspInit+0x94>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <HAL_TIM_Base_MspInit+0x90>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40000800 	.word	0x40000800

080025d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a12      	ldr	r2, [pc, #72]	@ (800263c <HAL_TIM_MspPostInit+0x68>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d11e      	bne.n	8002634 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_TIM_MspPostInit+0x6c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin|MOTOR_IN3_Pin;
 8002612:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002624:	2301      	movs	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	4805      	ldr	r0, [pc, #20]	@ (8002644 <HAL_TIM_MspPostInit+0x70>)
 8002630:	f000 fe3a 	bl	80032a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40010000 	.word	0x40010000
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000

08002648 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_UART_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12b      	bne.n	80026c2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026a2:	230c      	movs	r3, #12
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b2:	2307      	movs	r3, #7
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <HAL_UART_MspInit+0x8c>)
 80026be:	f000 fdf3 	bl	80032a8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	@ 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <NMI_Handler+0x4>

080026e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <HardFault_Handler+0x4>

080026e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <MemManage_Handler+0x4>

080026f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <UsageFault_Handler+0x4>

08002700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272e:	f000 f8a9 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}

08002736 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_TWO_Pin);
 800273a:	2010      	movs	r0, #16
 800273c:	f000 ff6a 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <DMA1_Stream4_IRQHandler+0x10>)
 800274a:	f000 fb43 	bl	8002dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200000b0 	.word	0x200000b0

08002758 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_ONE_Pin);
 800275c:	2020      	movs	r0, #32
 800275e:	f000 ff59 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002790:	f7ff ffea 	bl	8002768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	@ (80027d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027ba:	f003 f865 	bl	8005888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027be:	f7fe ffd7 	bl	8001770 <main>
  bx  lr    
 80027c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80027d0:	08006370 	.word	0x08006370
  ldr r2, =_sbss
 80027d4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80027d8:	20000394 	.word	0x20000394

080027dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f92b 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fdd0 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f943 	bl	8002ace <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 f90b 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000030 	.word	0x20000030
 800287c:	20000038 	.word	0x20000038
 8002880:	20000034 	.word	0x20000034

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000038 	.word	0x20000038
 80028a8:	20000390 	.word	0x20000390

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000390 	.word	0x20000390

080028c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	@ (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f7ff ff8e 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff29 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff3e 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff8e 	bl	80029b8 <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5d 	bl	8002964 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff31 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa2 	bl	8002a20 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff feda 	bl	80028ac <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e099      	b.n	8002c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b24:	e00f      	b.n	8002b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b26:	f7ff fec1 	bl	80028ac <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d908      	bls.n	8002b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e078      	b.n	8002c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e8      	bne.n	8002b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4b38      	ldr	r3, [pc, #224]	@ (8002c40 <HAL_DMA_Init+0x158>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d117      	bne.n	8002c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fadf 	bl	80031b0 <DMA_CheckFifoParam>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c06:	2301      	movs	r3, #1
 8002c08:	e016      	b.n	8002c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa96 	bl	8003144 <DMA_CalcBaseAndBitshift>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	223f      	movs	r2, #63	@ 0x3f
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	f010803f 	.word	0xf010803f

08002c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Start_IT+0x26>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e040      	b.n	8002cec <HAL_DMA_Start_IT+0xa8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12f      	bne.n	8002cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fa28 	bl	80030e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	223f      	movs	r2, #63	@ 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0216 	orr.w	r2, r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d02:	f7ff fdd3 	bl	80028ac <HAL_GetTick>
 8002d06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	@ 0x80
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e052      	b.n	8002dcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0216 	bic.w	r2, r2, #22
 8002d34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <HAL_DMA_Abort+0x62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0208 	bic.w	r2, r2, #8
 8002d64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d76:	e013      	b.n	8002da0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d78:	f7ff fd98 	bl	80028ac <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d90c      	bls.n	8002da0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2203      	movs	r2, #3
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e015      	b.n	8002dcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e4      	bne.n	8002d78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	223f      	movs	r2, #63	@ 0x3f
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002de0:	4b8e      	ldr	r3, [pc, #568]	@ (800301c <HAL_DMA_IRQHandler+0x248>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a8e      	ldr	r2, [pc, #568]	@ (8003020 <HAL_DMA_IRQHandler+0x24c>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0a9b      	lsrs	r3, r3, #10
 8002dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	2208      	movs	r2, #8
 8002e00:	409a      	lsls	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01a      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	2201      	movs	r2, #1
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d012      	beq.n	8002eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	2204      	movs	r2, #4
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f043 0204 	orr.w	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d043      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03c      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	2210      	movs	r2, #16
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d018      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d108      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d024      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
 8002f02:	e01f      	b.n	8002f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
 8002f14:	e016      	b.n	8002f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0208 	bic.w	r2, r2, #8
 8002f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	2220      	movs	r2, #32
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 808f 	beq.w	8003074 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8087 	beq.w	8003074 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d136      	bne.n	8002fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0216 	bic.w	r2, r2, #22
 8002f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_DMA_IRQHandler+0x1da>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0208 	bic.w	r2, r2, #8
 8002fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	223f      	movs	r2, #63	@ 0x3f
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d07e      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
        }
        return;
 8002fea:	e079      	b.n	80030e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01d      	beq.n	8003036 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10d      	bne.n	8003024 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	2b00      	cmp	r3, #0
 800300e:	d031      	beq.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
 8003018:	e02c      	b.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
 800301a:	bf00      	nop
 800301c:	20000030 	.word	0x20000030
 8003020:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d023      	beq.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	e01e      	b.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10f      	bne.n	8003064 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0210 	bic.w	r2, r2, #16
 8003052:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	2b00      	cmp	r3, #0
 800307a:	d032      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d022      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2205      	movs	r2, #5
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d307      	bcc.n	80030bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f2      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x2cc>
 80030ba:	e000      	b.n	80030be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	e000      	b.n	80030e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030e0:	bf00      	nop
    }
  }
}
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d108      	bne.n	8003128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003126:	e007      	b.n	8003138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	60da      	str	r2, [r3, #12]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	3b10      	subs	r3, #16
 8003154:	4a14      	ldr	r2, [pc, #80]	@ (80031a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800315e:	4a13      	ldr	r2, [pc, #76]	@ (80031ac <DMA_CalcBaseAndBitshift+0x68>)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d909      	bls.n	8003186 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	1d1a      	adds	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58
 8003184:	e007      	b.n	8003196 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	aaaaaaab 	.word	0xaaaaaaab
 80031ac:	08006358 	.word	0x08006358

080031b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11f      	bne.n	800320a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d856      	bhi.n	800327e <DMA_CheckFifoParam+0xce>
 80031d0:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <DMA_CheckFifoParam+0x28>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031fb 	.word	0x080031fb
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	0800327f 	.word	0x0800327f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d046      	beq.n	8003282 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e043      	b.n	8003282 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003202:	d140      	bne.n	8003286 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003208:	e03d      	b.n	8003286 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003212:	d121      	bne.n	8003258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d837      	bhi.n	800328a <DMA_CheckFifoParam+0xda>
 800321a:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <DMA_CheckFifoParam+0x70>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003231 	.word	0x08003231
 8003224:	08003237 	.word	0x08003237
 8003228:	08003231 	.word	0x08003231
 800322c:	08003249 	.word	0x08003249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e030      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d025      	beq.n	800328e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003246:	e022      	b.n	800328e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003250:	d11f      	bne.n	8003292 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003256:	e01c      	b.n	8003292 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d903      	bls.n	8003266 <DMA_CheckFifoParam+0xb6>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d003      	beq.n	800326c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003264:	e018      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      break;
 800326a:	e015      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e00b      	b.n	8003296 <DMA_CheckFifoParam+0xe6>
      break;
 800327e:	bf00      	nop
 8003280:	e00a      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e008      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e006      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 800328a:	bf00      	nop
 800328c:	e004      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;   
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003296:	bf00      	nop
    }
  } 
  
  return status; 
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop

080032a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	@ 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e159      	b.n	8003578 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	429a      	cmp	r2, r3
 80032de:	f040 8148 	bne.w	8003572 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d005      	beq.n	80032fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d130      	bne.n	800335c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	2203      	movs	r2, #3
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 0201 	and.w	r2, r3, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b03      	cmp	r3, #3
 8003366:	d017      	beq.n	8003398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d123      	bne.n	80033ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	08da      	lsrs	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3208      	adds	r2, #8
 80033ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	220f      	movs	r2, #15
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	08da      	lsrs	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3208      	adds	r2, #8
 80033e6:	69b9      	ldr	r1, [r7, #24]
 80033e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0203 	and.w	r2, r3, #3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a2 	beq.w	8003572 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b57      	ldr	r3, [pc, #348]	@ (8003590 <HAL_GPIO_Init+0x2e8>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	4a56      	ldr	r2, [pc, #344]	@ (8003590 <HAL_GPIO_Init+0x2e8>)
 8003438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800343c:	6453      	str	r3, [r2, #68]	@ 0x44
 800343e:	4b54      	ldr	r3, [pc, #336]	@ (8003590 <HAL_GPIO_Init+0x2e8>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800344a:	4a52      	ldr	r2, [pc, #328]	@ (8003594 <HAL_GPIO_Init+0x2ec>)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	3302      	adds	r3, #2
 8003452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a49      	ldr	r2, [pc, #292]	@ (8003598 <HAL_GPIO_Init+0x2f0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d019      	beq.n	80034aa <HAL_GPIO_Init+0x202>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a48      	ldr	r2, [pc, #288]	@ (800359c <HAL_GPIO_Init+0x2f4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_GPIO_Init+0x1fe>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a47      	ldr	r2, [pc, #284]	@ (80035a0 <HAL_GPIO_Init+0x2f8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00d      	beq.n	80034a2 <HAL_GPIO_Init+0x1fa>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a46      	ldr	r2, [pc, #280]	@ (80035a4 <HAL_GPIO_Init+0x2fc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <HAL_GPIO_Init+0x1f6>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a45      	ldr	r2, [pc, #276]	@ (80035a8 <HAL_GPIO_Init+0x300>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_GPIO_Init+0x1f2>
 8003496:	2304      	movs	r3, #4
 8003498:	e008      	b.n	80034ac <HAL_GPIO_Init+0x204>
 800349a:	2307      	movs	r3, #7
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x204>
 800349e:	2303      	movs	r3, #3
 80034a0:	e004      	b.n	80034ac <HAL_GPIO_Init+0x204>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_Init+0x204>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_GPIO_Init+0x204>
 80034aa:	2300      	movs	r3, #0
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	f002 0203 	and.w	r2, r2, #3
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	4093      	lsls	r3, r2
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034bc:	4935      	ldr	r1, [pc, #212]	@ (8003594 <HAL_GPIO_Init+0x2ec>)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ca:	4b38      	ldr	r3, [pc, #224]	@ (80035ac <HAL_GPIO_Init+0x304>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ee:	4a2f      	ldr	r2, [pc, #188]	@ (80035ac <HAL_GPIO_Init+0x304>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f4:	4b2d      	ldr	r3, [pc, #180]	@ (80035ac <HAL_GPIO_Init+0x304>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003518:	4a24      	ldr	r2, [pc, #144]	@ (80035ac <HAL_GPIO_Init+0x304>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800351e:	4b23      	ldr	r3, [pc, #140]	@ (80035ac <HAL_GPIO_Init+0x304>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003542:	4a1a      	ldr	r2, [pc, #104]	@ (80035ac <HAL_GPIO_Init+0x304>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003548:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <HAL_GPIO_Init+0x304>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356c:	4a0f      	ldr	r2, [pc, #60]	@ (80035ac <HAL_GPIO_Init+0x304>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	f67f aea2 	bls.w	80032c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	40013800 	.word	0x40013800
 8003598:	40020000 	.word	0x40020000
 800359c:	40020400 	.word	0x40020400
 80035a0:	40020800 	.word	0x40020800
 80035a4:	40020c00 	.word	0x40020c00
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40013c00 	.word	0x40013c00

080035b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e001      	b.n	80035d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800361e:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800362a:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fcca 	bl	8000fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40013c00 	.word	0x40013c00

08003644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e267      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d075      	beq.n	800374e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003662:	4b88      	ldr	r3, [pc, #544]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b04      	cmp	r3, #4
 800366c:	d00c      	beq.n	8003688 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4b85      	ldr	r3, [pc, #532]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003676:	2b08      	cmp	r3, #8
 8003678:	d112      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b82      	ldr	r3, [pc, #520]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003686:	d10b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	4b7e      	ldr	r3, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05b      	beq.n	800374c <HAL_RCC_OscConfig+0x108>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d157      	bne.n	800374c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e242      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x74>
 80036aa:	4b76      	ldr	r3, [pc, #472]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b70      	ldr	r3, [pc, #448]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036dc:	4b69      	ldr	r3, [pc, #420]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a68      	ldr	r2, [pc, #416]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b66      	ldr	r3, [pc, #408]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a65      	ldr	r2, [pc, #404]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff f8d6 	bl	80028ac <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff f8d2 	bl	80028ac <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e207      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b5b      	ldr	r3, [pc, #364]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xc0>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff f8c2 	bl	80028ac <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800372c:	f7ff f8be 	bl	80028ac <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	@ 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1f3      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b51      	ldr	r3, [pc, #324]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0xe8>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800375a:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1c7      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4937      	ldr	r1, [pc, #220]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e03a      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b34      	ldr	r3, [pc, #208]	@ (8003888 <HAL_RCC_OscConfig+0x244>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7ff f877 	bl	80028ac <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c2:	f7ff f873 	bl	80028ac <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1a8      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b28      	ldr	r3, [pc, #160]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4925      	ldr	r1, [pc, #148]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCC_OscConfig+0x244>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7ff f856 	bl	80028ac <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7ff f852 	bl	80028ac <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e187      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b1b      	ldr	r3, [pc, #108]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d036      	beq.n	800389c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_RCC_OscConfig+0x248>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7ff f836 	bl	80028ac <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003844:	f7ff f832 	bl	80028ac <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e167      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x200>
 8003862:	e01b      	b.n	800389c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_RCC_OscConfig+0x248>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7ff f81f 	bl	80028ac <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e00e      	b.n	8003890 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7ff f81b 	bl	80028ac <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d907      	bls.n	8003890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e150      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
 8003884:	40023800 	.word	0x40023800
 8003888:	42470000 	.word	0x42470000
 800388c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	4b88      	ldr	r3, [pc, #544]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ea      	bne.n	8003872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8097 	beq.w	80039d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b81      	ldr	r3, [pc, #516]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	4b7d      	ldr	r3, [pc, #500]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ca:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b77      	ldr	r3, [pc, #476]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b74      	ldr	r3, [pc, #464]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a73      	ldr	r2, [pc, #460]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fe ffdb 	bl	80028ac <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fe ffd7 	bl	80028ac <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e10c      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x2ea>
 8003920:	4b64      	ldr	r3, [pc, #400]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
 800392c:	e01c      	b.n	8003968 <HAL_RCC_OscConfig+0x324>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x30c>
 8003936:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 800393c:	f043 0304 	orr.w	r3, r3, #4
 8003940:	6713      	str	r3, [r2, #112]	@ 0x70
 8003942:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	@ 0x70
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0x324>
 8003950:	4b58      	ldr	r3, [pc, #352]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a57      	ldr	r2, [pc, #348]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	@ 0x70
 800395c:	4b55      	ldr	r3, [pc, #340]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fe ff9c 	bl	80028ac <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fe ff98 	bl	80028ac <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0cb      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0ee      	beq.n	8003978 <HAL_RCC_OscConfig+0x334>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399c:	f7fe ff86 	bl	80028ac <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fe ff82 	bl	80028ac <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0b5      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ba:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1ee      	bne.n	80039a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039cc:	4b39      	ldr	r3, [pc, #228]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	4a38      	ldr	r2, [pc, #224]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a1 	beq.w	8003b24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e2:	4b34      	ldr	r3, [pc, #208]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d05c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d141      	bne.n	8003a7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	4b31      	ldr	r3, [pc, #196]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe ff56 	bl	80028ac <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fe ff52 	bl	80028ac <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e087      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	491b      	ldr	r1, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe ff2b 	bl	80028ac <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5a:	f7fe ff27 	bl	80028ac <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e05c      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x416>
 8003a78:	e054      	b.n	8003b24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe ff14 	bl	80028ac <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fe ff10 	bl	80028ac <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e045      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x444>
 8003aa6:	e03d      	b.n	8003b24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e038      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d028      	beq.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d121      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d11a      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d111      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cc      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b68      	ldr	r3, [pc, #416]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d90c      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b65      	ldr	r3, [pc, #404]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d044      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d119      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e067      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4934      	ldr	r1, [pc, #208]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c24:	f7fe fe42 	bl	80028ac <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fe fe3e 	bl	80028ac <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e04f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d20c      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fda2 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08006340 	.word	0x08006340
 8003cf8:	20000030 	.word	0x20000030
 8003cfc:	20000034 	.word	0x20000034

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b094      	sub	sp, #80	@ 0x50
 8003d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d18:	4b79      	ldr	r3, [pc, #484]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d00d      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x40>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	f200 80e1 	bhi.w	8003eec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d32:	e0db      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d38:	e0db      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3a:	4b73      	ldr	r3, [pc, #460]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d3e:	e0d8      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d40:	4b6f      	ldr	r3, [pc, #444]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b6a      	ldr	r3, [pc, #424]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	0159      	lsls	r1, r3, #5
 8003d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d84:	0150      	lsls	r0, r2, #5
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	1a51      	subs	r1, r2, r1
 8003d8e:	6139      	str	r1, [r7, #16]
 8003d90:	4629      	mov	r1, r5
 8003d92:	eb63 0301 	sbc.w	r3, r3, r1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da4:	4659      	mov	r1, fp
 8003da6:	018b      	lsls	r3, r1, #6
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dae:	4651      	mov	r1, sl
 8003db0:	018a      	lsls	r2, r1, #6
 8003db2:	4651      	mov	r1, sl
 8003db4:	ebb2 0801 	subs.w	r8, r2, r1
 8003db8:	4659      	mov	r1, fp
 8003dba:	eb63 0901 	sbc.w	r9, r3, r1
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	eb18 0303 	adds.w	r3, r8, r3
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	462b      	mov	r3, r5
 8003de0:	eb49 0303 	adc.w	r3, r9, r3
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003df2:	4629      	mov	r1, r5
 8003df4:	024b      	lsls	r3, r1, #9
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	024a      	lsls	r2, r1, #9
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e10:	f7fc fed0 	bl	8000bb4 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1c:	e058      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1e:	4b38      	ldr	r3, [pc, #224]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	2200      	movs	r2, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	4611      	mov	r1, r2
 8003e2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	f04f 0000 	mov.w	r0, #0
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	0159      	lsls	r1, r3, #5
 8003e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e4a:	0150      	lsls	r0, r2, #5
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4641      	mov	r1, r8
 8003e52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e56:	4649      	mov	r1, r9
 8003e58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e70:	ebb2 040a 	subs.w	r4, r2, sl
 8003e74:	eb63 050b 	sbc.w	r5, r3, fp
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	00eb      	lsls	r3, r5, #3
 8003e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e86:	00e2      	lsls	r2, r4, #3
 8003e88:	4614      	mov	r4, r2
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	18e3      	adds	r3, r4, r3
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	464b      	mov	r3, r9
 8003e94:	eb45 0303 	adc.w	r3, r5, r3
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	028b      	lsls	r3, r1, #10
 8003eaa:	4621      	mov	r1, r4
 8003eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	028a      	lsls	r2, r1, #10
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eba:	2200      	movs	r2, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	61fa      	str	r2, [r7, #28]
 8003ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec4:	f7fc fe76 	bl	8000bb4 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ee0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3750      	adds	r7, #80	@ 0x50
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	00f42400 	.word	0x00f42400
 8003f08:	007a1200 	.word	0x007a1200

08003f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f10:	4b03      	ldr	r3, [pc, #12]	@ (8003f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000030 	.word	0x20000030

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f28:	f7ff fff0 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0a9b      	lsrs	r3, r3, #10
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	08006350 	.word	0x08006350

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f50:	f7ff ffdc 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0b5b      	lsrs	r3, r3, #13
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4903      	ldr	r1, [pc, #12]	@ (8003f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	08006350 	.word	0x08006350

08003f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07b      	b.n	800407e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d108      	bne.n	8003fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f96:	d009      	beq.n	8003fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
 8003f9e:	e005      	b.n	8003fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fe fa1e 	bl	8002408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004030:	ea42 0103 	orr.w	r1, r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f003 0104 	and.w	r1, r3, #4
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	f003 0210 	and.w	r2, r3, #16
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800406c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
 80040a4:	e097      	b.n	80041d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Transmit_DMA+0x2a>
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e08f      	b.n	80041d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_SPI_Transmit_DMA+0x3c>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e088      	b.n	80041d6 <HAL_SPI_Transmit_DMA+0x14e>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2203      	movs	r2, #3
 80040d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004112:	d10f      	bne.n	8004134 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004122:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004132:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004138:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <HAL_SPI_Transmit_DMA+0x158>)
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004140:	4a28      	ldr	r2, [pc, #160]	@ (80041e4 <HAL_SPI_Transmit_DMA+0x15c>)
 8004142:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004148:	4a27      	ldr	r2, [pc, #156]	@ (80041e8 <HAL_SPI_Transmit_DMA+0x160>)
 800414a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004150:	2200      	movs	r2, #0
 8004152:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	4619      	mov	r1, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800416c:	f7fe fd6a 	bl	8002c44 <HAL_DMA_Start_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e023      	b.n	80041d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d007      	beq.n	80041ac <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0220 	orr.w	r2, r2, #32
 80041c2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0202 	orr.w	r2, r2, #2
 80041d2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	0800433b 	.word	0x0800433b
 80041e4:	08004293 	.word	0x08004293
 80041e8:	08004357 	.word	0x08004357

080041ec <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00f      	beq.n	8004220 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fd75 	bl	8002cf4 <HAL_DMA_Abort>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	f043 0210 	orr.w	r2, r3, #16
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00f      	beq.n	8004248 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fd61 	bl	8002cf4 <HAL_DMA_Abort>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	f043 0210 	orr.w	r2, r3, #16
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0203 	bic.w	r2, r2, #3
 8004256:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  return errorcode;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a0:	f7fe fb04 	bl	80028ac <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b4:	d03b      	beq.n	800432e <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0220 	bic.w	r2, r2, #32
 80042c4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0202 	bic.w	r2, r2, #2
 80042d4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	2164      	movs	r1, #100	@ 0x64
 80042da:	6978      	ldr	r0, [r7, #20]
 80042dc:	f000 f8e4 	bl	80044a8 <SPI_EndRxTxTransaction>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004326:	6978      	ldr	r0, [r7, #20]
 8004328:	f7ff ffa9 	bl	800427e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800432c:	e002      	b.n	8004334 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7fc fe3a 	bl	8000fa8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004346:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff8e 	bl	800426a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004362:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0203 	bic.w	r2, r2, #3
 8004372:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff ff78 	bl	800427e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043a8:	f7fe fa80 	bl	80028ac <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043b8:	f7fe fa78 	bl	80028ac <HAL_GetTick>
 80043bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043be:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	015b      	lsls	r3, r3, #5
 80043c4:	0d1b      	lsrs	r3, r3, #20
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ce:	e055      	b.n	800447c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d051      	beq.n	800447c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d8:	f7fe fa68 	bl	80028ac <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d902      	bls.n	80043ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d13d      	bne.n	800446a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004406:	d111      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004410:	d004      	beq.n	800441c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441a:	d107      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004434:	d10f      	bne.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e018      	b.n	800449c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	e002      	b.n	800447c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	3b01      	subs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	429a      	cmp	r2, r3
 8004498:	d19a      	bne.n	80043d0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000030 	.word	0x20000030

080044a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2201      	movs	r2, #1
 80044bc:	2102      	movs	r1, #2
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff ff6a 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e032      	b.n	8004540 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044da:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <SPI_EndRxTxTransaction+0xa0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1b      	ldr	r2, [pc, #108]	@ (800454c <SPI_EndRxTxTransaction+0xa4>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0d5b      	lsrs	r3, r3, #21
 80044e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f8:	d112      	bne.n	8004520 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	2180      	movs	r1, #128	@ 0x80
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff ff47 	bl	8004398 <SPI_WaitFlagStateUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d016      	beq.n	800453e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e00f      	b.n	8004540 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	3b01      	subs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b80      	cmp	r3, #128	@ 0x80
 8004538:	d0f2      	beq.n	8004520 <SPI_EndRxTxTransaction+0x78>
 800453a:	e000      	b.n	800453e <SPI_EndRxTxTransaction+0x96>
        break;
 800453c:	bf00      	nop
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000030 	.word	0x20000030
 800454c:	165e9f81 	.word	0x165e9f81

08004550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e041      	b.n	80045e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd ffe0 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 fb1c 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e03c      	b.n	8004682 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1e      	ldr	r2, [pc, #120]	@ (8004690 <HAL_TIM_Base_Start+0xa0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <HAL_TIM_Base_Start+0x5c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004622:	d013      	beq.n	800464c <HAL_TIM_Base_Start+0x5c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1a      	ldr	r2, [pc, #104]	@ (8004694 <HAL_TIM_Base_Start+0xa4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_TIM_Base_Start+0x5c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <HAL_TIM_Base_Start+0xa8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_TIM_Base_Start+0x5c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a17      	ldr	r2, [pc, #92]	@ (800469c <HAL_TIM_Base_Start+0xac>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIM_Base_Start+0x5c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a16      	ldr	r2, [pc, #88]	@ (80046a0 <HAL_TIM_Base_Start+0xb0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d111      	bne.n	8004670 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b06      	cmp	r3, #6
 800465c:	d010      	beq.n	8004680 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466e:	e007      	b.n	8004680 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800
 800469c:	40000c00 	.word	0x40000c00
 80046a0:	40014000 	.word	0x40014000

080046a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e041      	b.n	800473a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f839 	bl	8004742 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 fa72 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_TIM_PWM_Start+0x24>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e022      	b.n	80047c2 <HAL_TIM_PWM_Start+0x6a>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d109      	bne.n	8004796 <HAL_TIM_PWM_Start+0x3e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e015      	b.n	80047c2 <HAL_TIM_PWM_Start+0x6a>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d109      	bne.n	80047b0 <HAL_TIM_PWM_Start+0x58>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e008      	b.n	80047c2 <HAL_TIM_PWM_Start+0x6a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e068      	b.n	800489c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PWM_Start+0x82>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d8:	e013      	b.n	8004802 <HAL_TIM_PWM_Start+0xaa>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0x92>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e8:	e00b      	b.n	8004802 <HAL_TIM_PWM_Start+0xaa>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0xa2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f8:	e003      	b.n	8004802 <HAL_TIM_PWM_Start+0xaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2201      	movs	r2, #1
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fc8a 	bl	8005124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <HAL_TIM_PWM_Start+0x14c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d107      	bne.n	800482a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1d      	ldr	r2, [pc, #116]	@ (80048a4 <HAL_TIM_PWM_Start+0x14c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_TIM_PWM_Start+0x10e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483c:	d013      	beq.n	8004866 <HAL_TIM_PWM_Start+0x10e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a19      	ldr	r2, [pc, #100]	@ (80048a8 <HAL_TIM_PWM_Start+0x150>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIM_PWM_Start+0x10e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <HAL_TIM_PWM_Start+0x154>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIM_PWM_Start+0x10e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a16      	ldr	r2, [pc, #88]	@ (80048b0 <HAL_TIM_PWM_Start+0x158>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIM_PWM_Start+0x10e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <HAL_TIM_PWM_Start+0x15c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d111      	bne.n	800488a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d010      	beq.n	800489a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004888:	e007      	b.n	800489a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40014000 	.word	0x40014000

080048b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e0ae      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	f200 809f 	bhi.w	8004a24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004921 	.word	0x08004921
 80048f0:	08004a25 	.word	0x08004a25
 80048f4:	08004a25 	.word	0x08004a25
 80048f8:	08004a25 	.word	0x08004a25
 80048fc:	08004961 	.word	0x08004961
 8004900:	08004a25 	.word	0x08004a25
 8004904:	08004a25 	.word	0x08004a25
 8004908:	08004a25 	.word	0x08004a25
 800490c:	080049a3 	.word	0x080049a3
 8004910:	08004a25 	.word	0x08004a25
 8004914:	08004a25 	.word	0x08004a25
 8004918:	08004a25 	.word	0x08004a25
 800491c:	080049e3 	.word	0x080049e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f9d6 	bl	8004cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0208 	orr.w	r2, r2, #8
 800493a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0204 	bic.w	r2, r2, #4
 800494a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6999      	ldr	r1, [r3, #24]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	619a      	str	r2, [r3, #24]
      break;
 800495e:	e064      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fa1c 	bl	8004da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800497a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800498a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6999      	ldr	r1, [r3, #24]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	021a      	lsls	r2, r3, #8
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	619a      	str	r2, [r3, #24]
      break;
 80049a0:	e043      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fa67 	bl	8004e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0208 	orr.w	r2, r2, #8
 80049bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0204 	bic.w	r2, r2, #4
 80049cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69d9      	ldr	r1, [r3, #28]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	61da      	str	r2, [r3, #28]
      break;
 80049e0:	e023      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fab1 	bl	8004f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69d9      	ldr	r1, [r3, #28]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	021a      	lsls	r2, r3, #8
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	61da      	str	r2, [r3, #28]
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	75fb      	strb	r3, [r7, #23]
      break;
 8004a28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_TIM_ConfigClockSource+0x1c>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e0b4      	b.n	8004bc2 <HAL_TIM_ConfigClockSource+0x186>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a90:	d03e      	beq.n	8004b10 <HAL_TIM_ConfigClockSource+0xd4>
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a96:	f200 8087 	bhi.w	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9e:	f000 8086 	beq.w	8004bae <HAL_TIM_ConfigClockSource+0x172>
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa6:	d87f      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b70      	cmp	r3, #112	@ 0x70
 8004aaa:	d01a      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8004aac:	2b70      	cmp	r3, #112	@ 0x70
 8004aae:	d87b      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b60      	cmp	r3, #96	@ 0x60
 8004ab2:	d050      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x11a>
 8004ab4:	2b60      	cmp	r3, #96	@ 0x60
 8004ab6:	d877      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b50      	cmp	r3, #80	@ 0x50
 8004aba:	d03c      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0xfa>
 8004abc:	2b50      	cmp	r3, #80	@ 0x50
 8004abe:	d873      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d058      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x13a>
 8004ac4:	2b40      	cmp	r3, #64	@ 0x40
 8004ac6:	d86f      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b30      	cmp	r3, #48	@ 0x30
 8004aca:	d064      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15a>
 8004acc:	2b30      	cmp	r3, #48	@ 0x30
 8004ace:	d86b      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d060      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d867      	bhi.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d05c      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15a>
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d05a      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ae0:	e062      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	f000 faf7 	bl	80050e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	609a      	str	r2, [r3, #8]
      break;
 8004b0e:	e04f      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	f000 fae0 	bl	80050e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b32:	609a      	str	r2, [r3, #8]
      break;
 8004b34:	e03c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 fa54 	bl	8004ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2150      	movs	r1, #80	@ 0x50
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 faad 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004b54:	e02c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 fa73 	bl	800504e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2160      	movs	r1, #96	@ 0x60
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fa9d 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004b74:	e01c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 fa34 	bl	8004ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2140      	movs	r1, #64	@ 0x40
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa8d 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004b94:	e00c      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f000 fa84 	bl	80050ae <TIM_ITRx_SetConfig>
      break;
 8004ba6:	e003      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e000      	b.n	8004bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a37      	ldr	r2, [pc, #220]	@ (8004cbc <TIM_Base_SetConfig+0xf0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00f      	beq.n	8004c04 <TIM_Base_SetConfig+0x38>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0x38>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a34      	ldr	r2, [pc, #208]	@ (8004cc0 <TIM_Base_SetConfig+0xf4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0x38>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a33      	ldr	r2, [pc, #204]	@ (8004cc4 <TIM_Base_SetConfig+0xf8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x38>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a32      	ldr	r2, [pc, #200]	@ (8004cc8 <TIM_Base_SetConfig+0xfc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d108      	bne.n	8004c16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a28      	ldr	r2, [pc, #160]	@ (8004cbc <TIM_Base_SetConfig+0xf0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01b      	beq.n	8004c56 <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c24:	d017      	beq.n	8004c56 <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a25      	ldr	r2, [pc, #148]	@ (8004cc0 <TIM_Base_SetConfig+0xf4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a24      	ldr	r2, [pc, #144]	@ (8004cc4 <TIM_Base_SetConfig+0xf8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00f      	beq.n	8004c56 <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a23      	ldr	r2, [pc, #140]	@ (8004cc8 <TIM_Base_SetConfig+0xfc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a22      	ldr	r2, [pc, #136]	@ (8004ccc <TIM_Base_SetConfig+0x100>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a21      	ldr	r2, [pc, #132]	@ (8004cd0 <TIM_Base_SetConfig+0x104>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a20      	ldr	r2, [pc, #128]	@ (8004cd4 <TIM_Base_SetConfig+0x108>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d108      	bne.n	8004c68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	@ (8004cbc <TIM_Base_SetConfig+0xf0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d103      	bne.n	8004c96 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	601a      	str	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f023 0201 	bic.w	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 0302 	bic.w	r3, r3, #2
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004da0 <TIM_OC1_SetConfig+0xc8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d10c      	bne.n	8004d4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0308 	bic.w	r3, r3, #8
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 0304 	bic.w	r3, r3, #4
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a13      	ldr	r2, [pc, #76]	@ (8004da0 <TIM_OC1_SetConfig+0xc8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d111      	bne.n	8004d7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40010000 	.word	0x40010000

08004da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 0210 	bic.w	r2, r3, #16
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0320 	bic.w	r3, r3, #32
 8004dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e78 <TIM_OC2_SetConfig+0xd4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10d      	bne.n	8004e20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a15      	ldr	r2, [pc, #84]	@ (8004e78 <TIM_OC2_SetConfig+0xd4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d113      	bne.n	8004e50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000

08004e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <TIM_OC3_SetConfig+0xd0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10d      	bne.n	8004ef6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a14      	ldr	r2, [pc, #80]	@ (8004f4c <TIM_OC3_SetConfig+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d113      	bne.n	8004f26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40010000 	.word	0x40010000

08004f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a10      	ldr	r2, [pc, #64]	@ (8004fec <TIM_OC4_SetConfig+0x9c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d109      	bne.n	8004fc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000

08004ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0201 	bic.w	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800501a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f023 030a 	bic.w	r3, r3, #10
 800502c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800508a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f043 0307 	orr.w	r3, r3, #7
 80050d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	021a      	lsls	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	431a      	orrs	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	609a      	str	r2, [r3, #8]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	2201      	movs	r2, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005184:	2302      	movs	r3, #2
 8005186:	e050      	b.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d018      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d013      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a16      	ldr	r2, [pc, #88]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a15      	ldr	r2, [pc, #84]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10c      	bne.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4313      	orrs	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40014000 	.word	0x40014000

0800524c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005264:	2302      	movs	r3, #2
 8005266:	e03d      	b.n	80052e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e042      	b.n	8005388 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fd f996 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2224      	movs	r2, #36	@ 0x24
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f82b 	bl	8005390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005394:	b0c0      	sub	sp, #256	@ 0x100
 8005396:	af00      	add	r7, sp, #0
 8005398:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	68d9      	ldr	r1, [r3, #12]
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	ea40 0301 	orr.w	r3, r0, r1
 80053b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053e8:	f021 010c 	bic.w	r1, r1, #12
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053f6:	430b      	orrs	r3, r1
 80053f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540a:	6999      	ldr	r1, [r3, #24]
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	ea40 0301 	orr.w	r3, r0, r1
 8005416:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b8f      	ldr	r3, [pc, #572]	@ (800565c <UART_SetConfig+0x2cc>)
 8005420:	429a      	cmp	r2, r3
 8005422:	d005      	beq.n	8005430 <UART_SetConfig+0xa0>
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b8d      	ldr	r3, [pc, #564]	@ (8005660 <UART_SetConfig+0x2d0>)
 800542c:	429a      	cmp	r2, r3
 800542e:	d104      	bne.n	800543a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005430:	f7fe fd8c 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8005434:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005438:	e003      	b.n	8005442 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800543a:	f7fe fd73 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 800543e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800544c:	f040 810c 	bne.w	8005668 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005454:	2200      	movs	r2, #0
 8005456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800545a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800545e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	1891      	adds	r1, r2, r2
 8005468:	65b9      	str	r1, [r7, #88]	@ 0x58
 800546a:	415b      	adcs	r3, r3
 800546c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800546e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005472:	4621      	mov	r1, r4
 8005474:	eb12 0801 	adds.w	r8, r2, r1
 8005478:	4629      	mov	r1, r5
 800547a:	eb43 0901 	adc.w	r9, r3, r1
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800548a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005492:	4690      	mov	r8, r2
 8005494:	4699      	mov	r9, r3
 8005496:	4623      	mov	r3, r4
 8005498:	eb18 0303 	adds.w	r3, r8, r3
 800549c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054a0:	462b      	mov	r3, r5
 80054a2:	eb49 0303 	adc.w	r3, r9, r3
 80054a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054be:	460b      	mov	r3, r1
 80054c0:	18db      	adds	r3, r3, r3
 80054c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c4:	4613      	mov	r3, r2
 80054c6:	eb42 0303 	adc.w	r3, r2, r3
 80054ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80054cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054d4:	f7fb fb6e 	bl	8000bb4 <__aeabi_uldivmod>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4b61      	ldr	r3, [pc, #388]	@ (8005664 <UART_SetConfig+0x2d4>)
 80054de:	fba3 2302 	umull	r2, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	011c      	lsls	r4, r3, #4
 80054e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	1891      	adds	r1, r2, r2
 80054fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005500:	415b      	adcs	r3, r3
 8005502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005508:	4641      	mov	r1, r8
 800550a:	eb12 0a01 	adds.w	sl, r2, r1
 800550e:	4649      	mov	r1, r9
 8005510:	eb43 0b01 	adc.w	fp, r3, r1
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005528:	4692      	mov	sl, r2
 800552a:	469b      	mov	fp, r3
 800552c:	4643      	mov	r3, r8
 800552e:	eb1a 0303 	adds.w	r3, sl, r3
 8005532:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005536:	464b      	mov	r3, r9
 8005538:	eb4b 0303 	adc.w	r3, fp, r3
 800553c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800554c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005554:	460b      	mov	r3, r1
 8005556:	18db      	adds	r3, r3, r3
 8005558:	643b      	str	r3, [r7, #64]	@ 0x40
 800555a:	4613      	mov	r3, r2
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	647b      	str	r3, [r7, #68]	@ 0x44
 8005562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800556a:	f7fb fb23 	bl	8000bb4 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4611      	mov	r1, r2
 8005574:	4b3b      	ldr	r3, [pc, #236]	@ (8005664 <UART_SetConfig+0x2d4>)
 8005576:	fba3 2301 	umull	r2, r3, r3, r1
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	2264      	movs	r2, #100	@ 0x64
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	1acb      	subs	r3, r1, r3
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800558a:	4b36      	ldr	r3, [pc, #216]	@ (8005664 <UART_SetConfig+0x2d4>)
 800558c:	fba3 2302 	umull	r2, r3, r3, r2
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005598:	441c      	add	r4, r3
 800559a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	1891      	adds	r1, r2, r2
 80055b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055b4:	415b      	adcs	r3, r3
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055bc:	4641      	mov	r1, r8
 80055be:	1851      	adds	r1, r2, r1
 80055c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80055c2:	4649      	mov	r1, r9
 80055c4:	414b      	adcs	r3, r1
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055d4:	4659      	mov	r1, fp
 80055d6:	00cb      	lsls	r3, r1, #3
 80055d8:	4651      	mov	r1, sl
 80055da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055de:	4651      	mov	r1, sl
 80055e0:	00ca      	lsls	r2, r1, #3
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	4642      	mov	r2, r8
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055f0:	464b      	mov	r3, r9
 80055f2:	460a      	mov	r2, r1
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005608:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800560c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005610:	460b      	mov	r3, r1
 8005612:	18db      	adds	r3, r3, r3
 8005614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005616:	4613      	mov	r3, r2
 8005618:	eb42 0303 	adc.w	r3, r2, r3
 800561c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800561e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005626:	f7fb fac5 	bl	8000bb4 <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <UART_SetConfig+0x2d4>)
 8005630:	fba3 1302 	umull	r1, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	2164      	movs	r1, #100	@ 0x64
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	3332      	adds	r3, #50	@ 0x32
 8005642:	4a08      	ldr	r2, [pc, #32]	@ (8005664 <UART_SetConfig+0x2d4>)
 8005644:	fba2 2303 	umull	r2, r3, r2, r3
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	f003 0207 	and.w	r2, r3, #7
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4422      	add	r2, r4
 8005656:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005658:	e106      	b.n	8005868 <UART_SetConfig+0x4d8>
 800565a:	bf00      	nop
 800565c:	40011000 	.word	0x40011000
 8005660:	40011400 	.word	0x40011400
 8005664:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566c:	2200      	movs	r2, #0
 800566e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005672:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800567a:	4642      	mov	r2, r8
 800567c:	464b      	mov	r3, r9
 800567e:	1891      	adds	r1, r2, r2
 8005680:	6239      	str	r1, [r7, #32]
 8005682:	415b      	adcs	r3, r3
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
 8005686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800568a:	4641      	mov	r1, r8
 800568c:	1854      	adds	r4, r2, r1
 800568e:	4649      	mov	r1, r9
 8005690:	eb43 0501 	adc.w	r5, r3, r1
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	00eb      	lsls	r3, r5, #3
 800569e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056a2:	00e2      	lsls	r2, r4, #3
 80056a4:	4614      	mov	r4, r2
 80056a6:	461d      	mov	r5, r3
 80056a8:	4643      	mov	r3, r8
 80056aa:	18e3      	adds	r3, r4, r3
 80056ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b0:	464b      	mov	r3, r9
 80056b2:	eb45 0303 	adc.w	r3, r5, r3
 80056b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056d6:	4629      	mov	r1, r5
 80056d8:	008b      	lsls	r3, r1, #2
 80056da:	4621      	mov	r1, r4
 80056dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e0:	4621      	mov	r1, r4
 80056e2:	008a      	lsls	r2, r1, #2
 80056e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056e8:	f7fb fa64 	bl	8000bb4 <__aeabi_uldivmod>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4b60      	ldr	r3, [pc, #384]	@ (8005874 <UART_SetConfig+0x4e4>)
 80056f2:	fba3 2302 	umull	r2, r3, r3, r2
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	011c      	lsls	r4, r3, #4
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005704:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	1891      	adds	r1, r2, r2
 8005712:	61b9      	str	r1, [r7, #24]
 8005714:	415b      	adcs	r3, r3
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800571c:	4641      	mov	r1, r8
 800571e:	1851      	adds	r1, r2, r1
 8005720:	6139      	str	r1, [r7, #16]
 8005722:	4649      	mov	r1, r9
 8005724:	414b      	adcs	r3, r1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005734:	4659      	mov	r1, fp
 8005736:	00cb      	lsls	r3, r1, #3
 8005738:	4651      	mov	r1, sl
 800573a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573e:	4651      	mov	r1, sl
 8005740:	00ca      	lsls	r2, r1, #3
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	4603      	mov	r3, r0
 8005748:	4642      	mov	r2, r8
 800574a:	189b      	adds	r3, r3, r2
 800574c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005750:	464b      	mov	r3, r9
 8005752:	460a      	mov	r2, r1
 8005754:	eb42 0303 	adc.w	r3, r2, r3
 8005758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005766:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005774:	4649      	mov	r1, r9
 8005776:	008b      	lsls	r3, r1, #2
 8005778:	4641      	mov	r1, r8
 800577a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577e:	4641      	mov	r1, r8
 8005780:	008a      	lsls	r2, r1, #2
 8005782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005786:	f7fb fa15 	bl	8000bb4 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4611      	mov	r1, r2
 8005790:	4b38      	ldr	r3, [pc, #224]	@ (8005874 <UART_SetConfig+0x4e4>)
 8005792:	fba3 2301 	umull	r2, r3, r3, r1
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2264      	movs	r2, #100	@ 0x64
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	1acb      	subs	r3, r1, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	3332      	adds	r3, #50	@ 0x32
 80057a4:	4a33      	ldr	r2, [pc, #204]	@ (8005874 <UART_SetConfig+0x4e4>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b0:	441c      	add	r4, r3
 80057b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b6:	2200      	movs	r2, #0
 80057b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80057ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80057bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	415b      	adcs	r3, r3
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d0:	4641      	mov	r1, r8
 80057d2:	1851      	adds	r1, r2, r1
 80057d4:	6039      	str	r1, [r7, #0]
 80057d6:	4649      	mov	r1, r9
 80057d8:	414b      	adcs	r3, r1
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057e8:	4659      	mov	r1, fp
 80057ea:	00cb      	lsls	r3, r1, #3
 80057ec:	4651      	mov	r1, sl
 80057ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f2:	4651      	mov	r1, sl
 80057f4:	00ca      	lsls	r2, r1, #3
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	4642      	mov	r2, r8
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005802:	464b      	mov	r3, r9
 8005804:	460a      	mov	r2, r1
 8005806:	eb42 0303 	adc.w	r3, r2, r3
 800580a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	663b      	str	r3, [r7, #96]	@ 0x60
 8005816:	667a      	str	r2, [r7, #100]	@ 0x64
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005824:	4649      	mov	r1, r9
 8005826:	008b      	lsls	r3, r1, #2
 8005828:	4641      	mov	r1, r8
 800582a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800582e:	4641      	mov	r1, r8
 8005830:	008a      	lsls	r2, r1, #2
 8005832:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005836:	f7fb f9bd 	bl	8000bb4 <__aeabi_uldivmod>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <UART_SetConfig+0x4e4>)
 8005840:	fba3 1302 	umull	r1, r3, r3, r2
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	2164      	movs	r1, #100	@ 0x64
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	3332      	adds	r3, #50	@ 0x32
 8005852:	4a08      	ldr	r2, [pc, #32]	@ (8005874 <UART_SetConfig+0x4e4>)
 8005854:	fba2 2303 	umull	r2, r3, r2, r3
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	f003 020f 	and.w	r2, r3, #15
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4422      	add	r2, r4
 8005866:	609a      	str	r2, [r3, #8]
}
 8005868:	bf00      	nop
 800586a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800586e:	46bd      	mov	sp, r7
 8005870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005874:	51eb851f 	.word	0x51eb851f

08005878 <memset>:
 8005878:	4402      	add	r2, r0
 800587a:	4603      	mov	r3, r0
 800587c:	4293      	cmp	r3, r2
 800587e:	d100      	bne.n	8005882 <memset+0xa>
 8005880:	4770      	bx	lr
 8005882:	f803 1b01 	strb.w	r1, [r3], #1
 8005886:	e7f9      	b.n	800587c <memset+0x4>

08005888 <__libc_init_array>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4d0d      	ldr	r5, [pc, #52]	@ (80058c0 <__libc_init_array+0x38>)
 800588c:	4c0d      	ldr	r4, [pc, #52]	@ (80058c4 <__libc_init_array+0x3c>)
 800588e:	1b64      	subs	r4, r4, r5
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	2600      	movs	r6, #0
 8005894:	42a6      	cmp	r6, r4
 8005896:	d109      	bne.n	80058ac <__libc_init_array+0x24>
 8005898:	4d0b      	ldr	r5, [pc, #44]	@ (80058c8 <__libc_init_array+0x40>)
 800589a:	4c0c      	ldr	r4, [pc, #48]	@ (80058cc <__libc_init_array+0x44>)
 800589c:	f000 f894 	bl	80059c8 <_init>
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	2600      	movs	r6, #0
 80058a6:	42a6      	cmp	r6, r4
 80058a8:	d105      	bne.n	80058b6 <__libc_init_array+0x2e>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b0:	4798      	blx	r3
 80058b2:	3601      	adds	r6, #1
 80058b4:	e7ee      	b.n	8005894 <__libc_init_array+0xc>
 80058b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ba:	4798      	blx	r3
 80058bc:	3601      	adds	r6, #1
 80058be:	e7f2      	b.n	80058a6 <__libc_init_array+0x1e>
 80058c0:	08006368 	.word	0x08006368
 80058c4:	08006368 	.word	0x08006368
 80058c8:	08006368 	.word	0x08006368
 80058cc:	0800636c 	.word	0x0800636c

080058d0 <floor>:
 80058d0:	ec51 0b10 	vmov	r0, r1, d0
 80058d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80058e0:	2e13      	cmp	r6, #19
 80058e2:	460c      	mov	r4, r1
 80058e4:	4605      	mov	r5, r0
 80058e6:	4680      	mov	r8, r0
 80058e8:	dc34      	bgt.n	8005954 <floor+0x84>
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	da17      	bge.n	800591e <floor+0x4e>
 80058ee:	a332      	add	r3, pc, #200	@ (adr r3, 80059b8 <floor+0xe8>)
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f7fa fc76 	bl	80001e4 <__adddf3>
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	f7fb f8b8 	bl	8000a70 <__aeabi_dcmpgt>
 8005900:	b150      	cbz	r0, 8005918 <floor+0x48>
 8005902:	2c00      	cmp	r4, #0
 8005904:	da55      	bge.n	80059b2 <floor+0xe2>
 8005906:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800590a:	432c      	orrs	r4, r5
 800590c:	2500      	movs	r5, #0
 800590e:	42ac      	cmp	r4, r5
 8005910:	4c2b      	ldr	r4, [pc, #172]	@ (80059c0 <floor+0xf0>)
 8005912:	bf08      	it	eq
 8005914:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005918:	4621      	mov	r1, r4
 800591a:	4628      	mov	r0, r5
 800591c:	e023      	b.n	8005966 <floor+0x96>
 800591e:	4f29      	ldr	r7, [pc, #164]	@ (80059c4 <floor+0xf4>)
 8005920:	4137      	asrs	r7, r6
 8005922:	ea01 0307 	and.w	r3, r1, r7
 8005926:	4303      	orrs	r3, r0
 8005928:	d01d      	beq.n	8005966 <floor+0x96>
 800592a:	a323      	add	r3, pc, #140	@ (adr r3, 80059b8 <floor+0xe8>)
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f7fa fc58 	bl	80001e4 <__adddf3>
 8005934:	2200      	movs	r2, #0
 8005936:	2300      	movs	r3, #0
 8005938:	f7fb f89a 	bl	8000a70 <__aeabi_dcmpgt>
 800593c:	2800      	cmp	r0, #0
 800593e:	d0eb      	beq.n	8005918 <floor+0x48>
 8005940:	2c00      	cmp	r4, #0
 8005942:	bfbe      	ittt	lt
 8005944:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005948:	4133      	asrlt	r3, r6
 800594a:	18e4      	addlt	r4, r4, r3
 800594c:	ea24 0407 	bic.w	r4, r4, r7
 8005950:	2500      	movs	r5, #0
 8005952:	e7e1      	b.n	8005918 <floor+0x48>
 8005954:	2e33      	cmp	r6, #51	@ 0x33
 8005956:	dd0a      	ble.n	800596e <floor+0x9e>
 8005958:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800595c:	d103      	bne.n	8005966 <floor+0x96>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	f7fa fc3f 	bl	80001e4 <__adddf3>
 8005966:	ec41 0b10 	vmov	d0, r0, r1
 800596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005972:	f04f 37ff 	mov.w	r7, #4294967295
 8005976:	40df      	lsrs	r7, r3
 8005978:	4207      	tst	r7, r0
 800597a:	d0f4      	beq.n	8005966 <floor+0x96>
 800597c:	a30e      	add	r3, pc, #56	@ (adr r3, 80059b8 <floor+0xe8>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f7fa fc2f 	bl	80001e4 <__adddf3>
 8005986:	2200      	movs	r2, #0
 8005988:	2300      	movs	r3, #0
 800598a:	f7fb f871 	bl	8000a70 <__aeabi_dcmpgt>
 800598e:	2800      	cmp	r0, #0
 8005990:	d0c2      	beq.n	8005918 <floor+0x48>
 8005992:	2c00      	cmp	r4, #0
 8005994:	da0a      	bge.n	80059ac <floor+0xdc>
 8005996:	2e14      	cmp	r6, #20
 8005998:	d101      	bne.n	800599e <floor+0xce>
 800599a:	3401      	adds	r4, #1
 800599c:	e006      	b.n	80059ac <floor+0xdc>
 800599e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80059a2:	2301      	movs	r3, #1
 80059a4:	40b3      	lsls	r3, r6
 80059a6:	441d      	add	r5, r3
 80059a8:	4545      	cmp	r5, r8
 80059aa:	d3f6      	bcc.n	800599a <floor+0xca>
 80059ac:	ea25 0507 	bic.w	r5, r5, r7
 80059b0:	e7b2      	b.n	8005918 <floor+0x48>
 80059b2:	2500      	movs	r5, #0
 80059b4:	462c      	mov	r4, r5
 80059b6:	e7af      	b.n	8005918 <floor+0x48>
 80059b8:	8800759c 	.word	0x8800759c
 80059bc:	7e37e43c 	.word	0x7e37e43c
 80059c0:	bff00000 	.word	0xbff00000
 80059c4:	000fffff 	.word	0x000fffff

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
